<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Element-IT.PowUpload</name>
    </assembly>
    <members>
        <member name="T:ElementIT.PowUpload.IUploadHandle">
            <summary>
            Interface to create custom upload handlers.
            </summary>
            <remarks>Using this interface you can add own logic to upload process while runtime like save uploaded files data to SQL server, etc.</remarks>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.StartParseRequest(ElementIT.PowUpload.PowUpload)">
            <summary>
            Function executed before PowUpload parser starts. 
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <returns>If return value is <b>true</b> than current request will be proceed, otherwise it will be rejected and proceed by IIS.</returns>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.CancelRequest(ElementIT.PowUpload.PowUpload)">
            <summary>
            Method executed if user canceled request. 
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.ParseError(System.Exception,ElementIT.PowUpload.PowUpload)">
             <summary>
             Method executed if error occured in PowUpload parser. 
             </summary>
             <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <param name="ex">Occured Exception.</param>
             <returns>If return value is <b>true</b> than error will be shown immediatly, otherwise it will be saved to <see cref="P:ElementIT.PowUpload.PowUpload.LastError">PowUpload.LastError</see> property.</returns>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.WriteChunk(System.Byte[],ElementIT.PowUpload.PowUpload)">
            <summary>
            Method executed after new file data read.
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <param name="dataChunk">Chunk of file data that has been reed from last time.</param>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.NewFileFound(ElementIT.PowUpload.UploadedFile,ElementIT.PowUpload.PowUpload)">
            <summary>
            Function executed after new file found.
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <param name="file"><see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> object represents file which was found.</param>
            <returns>If return value is <b>true</b> than file will be saved on hard disk; otherwise willn't.</returns>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.EndFileFound(ElementIT.PowUpload.UploadedFile,ElementIT.PowUpload.PowUpload)">
            <summary>
            Function executed after file was fully read from request.
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <param name="file"><see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> object represents file which was read.</param>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.EndParseRequest(ElementIT.PowUpload.PowUpload)">
            <summary>
            Function executed after PowUpload parser finished to read request.
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
        </member>
        <member name="M:ElementIT.PowUpload.IUploadHandle.FormFieldFound(System.String,System.String,ElementIT.PowUpload.PowUpload)">
            <summary>
            Function executed after new non-file Form Field found in request.
            </summary>
            <param name="info"><see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class for this request.</param>
            <param name="fieldName">String represents the Name attribute of item at the Form.</param>
            <param name="fieldValue">String represents value of the Form field.</param>
        </member>
        <member name="T:ElementIT.PowUpload.PowUpload">
            <summary>Main PowUpload class. Gives access to the files contained in an HTTP POST request 
            and allows to monitor the progress of the files upload.
            </summary>
        </member>
        <member name="M:ElementIT.PowUpload.PowUpload.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <b>PowUpload</b> object with specified ID.
            </summary>
            <param name="id">A string representing ID of the corresponding upload process.</param>
            <remarks>The ID parameter is used to bind the <b>PowUpload</b> object with the upload process.</remarks>		
        </member>
        <member name="M:ElementIT.PowUpload.PowUpload.#ctor">
            <summary>
             Initializes a new instance of the <b>PowUpload</b> object with specified ID.
            </summary>
        </member>
        <member name="M:ElementIT.PowUpload.PowUpload.CancelUpload(System.Boolean,System.Boolean)">
            <summary>
             Stops upload, terminates the connection with the client if demanded and 
             deletes all files uploaded if demanded. 
            </summary>
            <param name="closeConnection">Set to <b>true</b> if request should be terminated; otherwise, <b>false</b>.</param>
            <param name="deleteFiles">Set to <b>true</b> if the uploaded files should be deleted; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:ElementIT.PowUpload.PowUpload.CancelUpload(System.Boolean)">
            <summary>
              Stops upload and if specified terminates the connection with the client.
            </summary>
            <param name="closeConnection">Set to <b>true</b> if request should be terminated; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:ElementIT.PowUpload.PowUpload.Dispose">
            <summary>
            Forces the release of all resources used  <b>PowUpload</b> object
            : Deletes temporary files, closes <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> streams 
            created by the <see cref="P:ElementIT.PowUpload.UploadedFile.InputStream">InputStream</see> property. 
            </summary>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.id">
            <summary>
             Gets or sets ID to bind the <b>PowUpload</b> object with the upload process.
            </summary>
            <value>The ID of the <b>PowUpload</b> object instanse.</value>
            <remarks>The same as ID parameter passed to constructor.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.CustomData">
            <summary>
             Property of any type allows to store custom data between progress bar calls or
             between progress bar and final file processings script. 
            </summary>
            <value>Any type Object. To pass few types of data use sctructure.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.LastError">
            <summary>
            Gets the last <see cref="T:System.Exception">Exception</see> occurred during the upload process. 
            </summary>
            <value>The <see cref="T:System.Exception">Exception</see> object that 
            represents the last occurred error.</value>
            <remarks>
            Errors occurred in processing the files uploaded willn't be returned by this property.
            This property is useful to determine whether the files was uploaded 
            successfully or an error occurred. The property is <b>null</b> if the 
            upload completed succesfully. 
            </remarks>
            <seealso cref="T:System.Exception">Exception class</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.FormFields">
            <summary>
            Gets a collection of form variables (non-files Form fields) currently uploaded
            </summary>
            <value>The <see cref="T:System.Collections.Specialized.NameValueCollection">NameValueCollection</see> object 
            representing a collection of form variables.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.BandwidthLimit">
            <summary>
            Gets or sets maximum upload speed for current upload process.
            </summary>
            <value>The Long type value specifies maximum upload speed for upload process in bytes per second.</value>	
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.BytesPerSecondAverage">
            <summary>
             Gets the average data transfer rate for the upload in bytes per second.
            </summary>
            <value>The average data transfer rate in bytes per second.</value>
            <remarks>Value determined by the following formula: <c>UploadedBytes/SecondsDone</c></remarks>	
            <seealso cref="P:ElementIT.PowUpload.PowUpload.BytesPerSecondCurrent">BytesPerSecondCurrent property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.BytesPerSecondCurrent">
            <summary>
             Gets the current data transfer rate for the upload in bytes per second.
            </summary>
            <value>The current data transfer rate in bytes per second.</value>
            <remarks>Returns transfer rate for the last data chunk uploaded. 
            <para>This value varies a lot depending on the server load degree and the Internet connection rate.
            This is the <b>current</b> transfer rate. Use 
            <see cref="P:ElementIT.PowUpload.PowUpload.BytesPerSecondAverage">BytesPerSecondAverage</see> property to get an 
            average transfer rate.  
            </para></remarks>	
            <seealso cref="P:ElementIT.PowUpload.PowUpload.BytesPerSecondAverage">BytesPerSecondAverage property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.SecondsLeftCurrent">
            <summary>
            Gets the estimated number of seconds left to complete upload.
            </summary>
            <value>The estimated number of seconds left.</value>
            <remarks>This value is based on the current transfer rate. So it varies a lot with time. 
            <para>Use 
            <see cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftAverage">SecondsLeftAverage</see> property to get 
            more probable number of seconds left.</para></remarks>	
            <seealso cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftAverage">SecondsLeftAverage property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.SecondsLeftAverage">
            <summary>
            Gets the estimated number of seconds left to complete upload.
            </summary>
            <value>The estimated number of seconds left.</value>
            <remarks>This value is based on the average transfer rate. This value is more stable than 
            <see cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftCurrent">SecondsLeftCurrent</see> property.
            </remarks>	
            <seealso cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftCurrent">SecondsLeftCurrent property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.SecondsDone">
            <summary>
             Gets the number of seconds elapsed since the upload start.
            </summary>
            <value>The number of seconds elapsed since the upload start.</value>
            <seealso cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftAverage">SecondsLeftAverage property</seealso>
            <seealso cref="P:ElementIT.PowUpload.PowUpload.SecondsLeftCurrent">SecondsLeftCurrent property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.PercentDone">
            <summary>
            Gets the percentage of the upload transfer is completed.
            </summary>
            <value>Percentage of the upload process is completed.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.TotalBytes">
            <summary>
            Gets the total size of the HTTP POST request.
            </summary>
            <value>Total size of the HTTP POST request in bytes.</value>
            <remarks>HTTP POST request includes files content, files names and other ancillary data. 
            So HTTP POST request size is greater than total files size.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.UploadStatus">
            <summary>
             Gets the current upload status.
            </summary>
            <value>The <see cref="T:ElementIT.PowUpload.UploadState">UploadState</see> of the upload.</value>
            <remarks>See <see cref="T:ElementIT.PowUpload.UploadState">UploadState</see> for details.
            </remarks>
            <seealso cref="T:ElementIT.PowUpload.UploadState">UploadState enumeration</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.UploadedFilesCount">
            <summary>
             Gets completely uploaded files count.
            </summary>
            <value>The number of completely uploaded files.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.CurrentFileName">
            <summary>
             Gets the name of the currently uploading file.
            </summary>
            <value>A string that represents name of the currently uploading file.</value>
            <remarks>Returns path of the file on the client's computer.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.CurrentFileUploadedBytes">
            <summary>
             Gets the number of bytes of the currently uploading file that have been received by the server.
            </summary>
            <value>The number of bytes of the currently uploading file that have been received by the server.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.UploadComplete">
            <summary>
             Gets a value that indicates whether data transfer is complete.
            </summary>
            <value><b>true</b> if data transfer has finished; otherwise, <b>false</b>.</value>	
            <seealso cref="P:ElementIT.PowUpload.PowUpload.UploadStatus">UploadStatus property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.UploadedBytes">
            <summary>
             Gets the number of bytes that have been received by the server.
            </summary>
            <value>The number of bytes that have been received by the server.</value>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.Files">
            <summary>
            Gets the collection of current client-uploaded files.
            </summary>
            <value>An <see cref="T:ElementIT.PowUpload.UploadedFileCollection">UploadedFileCollection</see> object 
            representing a collection of client-uploaded files.</value>
            <seealso cref="T:ElementIT.PowUpload.UploadedFileCollection">UploadedFileCollection class</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.HttpWorkerRequest">
            <summary>
            Gets the <see cref="T:System.Web.HttpWorkerRequest">HttpWorkerRequest</see> object of upload request containing POST data. 
            </summary>
            <value><see cref="T:System.Web.HttpWorkerRequest">HttpWorkerRequest</see> object of upload request</value>		
            <remarks><b>HttpWorkerRequest</b> contains some helpfull information about POST request and can be helpfull to read some information before request will be fully uploaded.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.HttpContext">
            <summary>
            Gets the <see cref="T:System.Web.HttpWorkerRequest">HttpContext</see> object of upload request containing POST data. 
            </summary>
            <value><see cref="T:System.Web.HttpContext">HttpContext</see> object of upload request</value>		
            <remarks><b>HttpContext</b> contains some helpfull information about POST request and can be helpfull to read some information before request will be fully uploaded. 
            Use carefully some of properties and methods of
            this and child classes becouse some of data not available before request will be fully uploaded.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.PowUpload.UploadStatusString">
            <summary>
             Returns a string representation of the current upload status.
            </summary>
            <value>A string that represents status of the upload.</value>
            <remarks>Use this property to show upload status for user.</remarks>
            <example><code>PowUpload progr = new PowUpload(Request.QueryString["uploadID"]);	
            <br/>Response.Write (“Upload status: ” + PowUpload.UploadStatusString);</code></example>
            <seealso cref="P:ElementIT.PowUpload.PowUpload.UploadStatus">UploadStatus property</seealso>
        </member>
        <member name="T:ElementIT.PowUpload.UploadState">
            <summary>
             Specifies the available Upload process states.
            </summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Waiting">
            <summary>Initial state. The Upload process with the same ID as 
            specified in the <see cref="M:ElementIT.PowUpload.PowUpload.#ctor">constructor</see> hasn't started.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Uploading">
            <summary>Upload process is in progress.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Complete">
            <summary>Upload process has completed.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Error">
            <summary>An error occurs while the Upload process.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Cancelled">
            <summary>The Upload process cancelled by the user or by 
            the <see cref="M:ElementIT.PowUpload.PowUpload.CancelUpload(System.Boolean,System.Boolean)">PowUpload.CancelUpload()</see> method without hard connection close.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.Rejected">
            <summary>The Upload process was rejected due to the POST 
            request size exceeds the maximum or minimum allowed value.</summary>
        </member>
        <member name="F:ElementIT.PowUpload.UploadState.ConnectionClosed">
            <summary>Connection was closed while upload due to the POST 
            request size exceeds the maxRequestLengthToCloseConnection value or <see cref="M:ElementIT.PowUpload.PowUpload.CancelUpload(System.Boolean,System.Boolean)">PowUpload.CancelUpload(true)</see> method was called.</summary>
        </member>
        <member name="T:ElementIT.PowUpload.SettingsCollection">
            <summary>
            Class represents collection of all PowUpload settings.
            </summary>
        </member>
        <member name="P:ElementIT.PowUpload.SettingsCollection.Item(System.String)">
             <summary>
             Gets or sets an individual settings value from the collection 
              by the specified name.
             </summary>
            <param name="Name">The Name of the settings. It can be one of <see cref="T:ElementIT.PowUpload.Settings.SettingsParams">SettingsParams</see> string constants.</param>
            <value>Value of the settings with the specified name in collection.</value>
        </member>
        <member name="T:ElementIT.PowUpload.SingleRequestSettings">
            <summary>
            Provides access to settings for each upload process
            </summary>
        </member>
        <member name="M:ElementIT.PowUpload.SingleRequestSettings.Clear">
            <summary>
             Clears all individual settings for upload processes.
            </summary>
        </member>
        <member name="M:ElementIT.PowUpload.SingleRequestSettings.Remove(System.String)">
            <summary>
             Clears individual settings for upload with specified Upload ID.
            </summary>
            <param name="UploadID">Upload ID of upload process.</param>
        </member>
        <member name="P:ElementIT.PowUpload.SingleRequestSettings.Item(System.String)">
             <summary>
             Gets or sets an individual <see cref="T:ElementIT.PowUpload.SettingsCollection">SettingsCollection</see> for the specified upload ID.
             </summary>
            <param name="UploadID">The upload ID for which to get or set settings.</param>
            <value><b>SettingsCollection</b> for upload process with specified UploadID.</value>
        </member>
        <member name="T:ElementIT.PowUpload.Settings">
            <summary>
            Parent settings class. Provides access to PowUpload settings for all uploads or for each individual upload process.
            </summary>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.CommonSettings">
            <summary>
            Common settings collection for all uploads.
            </summary>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SingleSettings">
            <summary>
            Individual settings for uploads with own Upload ID.
            </summary>
        </member>
        <member name="P:ElementIT.PowUpload.Settings.HTTPRuntime_MaxRequestLength">
            <summary>
            Gets HttpRuntime element MaxRequestLength value, in bytes.
            </summary>
            <value>The Long type value represents MaxRequestLength value, in bytes.</value>
            <remarks>If MaxRequestLength parameter not specifed in Web.Config returns default <b>4194304 bytes(4 MB)</b> value.</remarks>
        </member>
        <member name="T:ElementIT.PowUpload.Settings.SettingsParams">
            <summary>
            Struct represent available names of PowUpload parameters.
            </summary>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.UploadIDQueryField">
             <summary>
             Query string field to use to determine the ID for the upload process. 
             </summary>
             <remarks>UploadIDQueryField parameter has default value <b>"UploadID"</b>. 
            A string "?UploadID=xxxxx" should be added to a file name of the "Action" parameter of the Form 
            (for example, Action="processupload.aspx?UploadID=123456789").</remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.ProcessPages">
             <summary>
             A string containing a list of pages. The PowUpload module will process all POST requests to these pages.
             </summary>
             <remarks>Pages are separated by commas. Query string fields can be included. 
            In a string expression it is allowed to use literal text characters and patterns like ? and *. 
            Default value is <b>"*.aspx"</b> (process request to all .aspx pages).</remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.MaxRequestLength">
             <summary>
             The maximum request size, in bytes. 
             </summary>		
             <remarks>POST request can't be stoped. Connection can be 
             hard terminated (See <see cref="F:ElementIT.PowUpload.Settings.SettingsParams.MaxRequestLengthToCloseConnection">MaxRequestLengthToCloseConnection</see> parameter); otherwise
             whole request will be received. If request greater than <b>MaxRequestLength</b> value PowUpload
             willn't save files but will get non-files Form fields;
              <see cref="P:ElementIT.PowUpload.PowUpload.UploadStatus">PowUpload.UploadStatus</see> will be <see cref="F:ElementIT.PowUpload.UploadState.Rejected">UploadState.Rejected</see> in this case.
              
            </remarks>	
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.IgnorePages">
             <summary>
             A string containing a list of pages. The PowUpload module will not process any POST request to these pages.
             </summary>
             <remarks>
             Pages are separated by commas. Query string fields can be included. 
            In a string expression it is allowed to use literal text characters and patterns like ? and *. 
            Default value is an empty string (don’t ignore nothing).
             </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.ThrowErrorsImmediately">
            <summary>
            Specifies if error while upload should be shown immediately. 
            </summary>
            <remarks>
            <b>true</b> to indicate if occurred error while upload should be shown immediately; 
            otherwise, <b>false</b> (error will be stored in the <see cref="P:ElementIT.PowUpload.PowUpload.LastError">LastError</see> property of the <see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> class). Default value is <b>"true"</b>.
            </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.LogExceptions">
            <summary>
            Specifies if occurred exceptions will be logged in the Application Event Log. 
            </summary>
            <remarks>
            <b>true</b> to indicate if occurred exceptions will be logged in the Application Event Log.
            </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.MinRequestLengthProcess">
            <summary>
            An integer that represents the minimal size of the POST request that the PowUpload module will process.
            </summary>
            <remarks>
            If the size of the POST request is less than the <b>MinRequestLengthProcess</b> value the built-in ASP.NET parser will process request. 
            Default value is <b>0</b> (all requests will be processed by the PowUpload module).
            </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.TempPath">
            <summary>
            A folder path to store temporary files for upload process.
            </summary>
            <remarks>
            Environment variables can be used. 
            Example: "%TEMP%" is the System TEMP folder. Grant NTFS Read and Write permissions to the anonymous 
            and ASPNET accounts in the temporary folder.
            </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.IgnoreHttpRuntimeMaxRequestLength">
            <summary>
            Specifies if PowUpload should use own <b>MaxRequestLength</b> parameter or to use native value of HttpRuntime element. 
            </summary>
            <remarks>
            <b>true</b> to indicate if PowUpload should ignore <b>maxRequestLength</b> parameter of HttpRuntime element (in Web.Config file) and to use own, otherwise <b>"false"</b>.
            </remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.UploadHandleObject">
            <summary>
            Instance of the class that implements IUploadHandle interface and can be used for custom processing uploaded files.
            </summary>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.MaxRequestLengthToCloseConnection">
            <summary>
            The maximum request size. All request greater than this value will be hard terminated.   
            </summary>
            <remarks>Parameter helpfull to prevent of denial-of-service attacks or to reduce server load.
            User gots not user-frienly message "Page can't be displayed" after connection terminated.
            You can redirect user to other page from progress bar window using Java Scripts.</remarks>
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.BandwidthLimit">
            <summary>
            An integer specifies maximum upload speed for each request in bytes per second. 
            </summary>			
        </member>
        <member name="F:ElementIT.PowUpload.Settings.SettingsParams.PassForm">
            <summary>
            Specifies if Form without files should be passed to ASP.NET built-in parser or not. 
            </summary>
            <remarks><b>true</b> to inditace if Form without files will be passed to ASP.NET parser, so Request.Form collection will have Form fields values; 
            otherwise <b>false</b>. Use <see cref="P:ElementIT.PowUpload.PowUpload.FormFields">PowUpload.FormFields</see> collection to read non-files Form fields values.</remarks>		
        </member>
        <member name="T:ElementIT.PowUpload.UploadedFile">
            <summary>
            Provides a way to access individual files that have been uploaded by a client. 
            </summary>
            <remarks>The <see cref="T:ElementIT.PowUpload.UploadedFileCollection">UploadedFileCollection</see> class provides access to all the files uploaded 
            from a client as a file collection. <b>UploadedFile</b> provides properties 
            and methods to get information on an individual file and to read and save the 
            file. Files are uploaded in <c>MIME multipart/form-data format</c> and are stored in 
            temp folder until explicitly moved to needed folder or deleted by <see cref="M:ElementIT.PowUpload.UploadedFile.Finalize">Destructor</see> or <see cref="M:ElementIT.PowUpload.UploadedFile.Dispose">Dispose</see> method.
            <para>You cannot create an <b>UploadedFile</b> object 
            directly. You must obtain it by referencing an item within the 
            <see cref="P:ElementIT.PowUpload.PowUpload.Files">Files</see> property of an <see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> object.</para></remarks>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.GetHashMD5">
            <summary>
            Returns the <see cref="T:System.Security.Cryptography.MD5">MD5</see> hash for uploaded file body. 		
            </summary>
            <returns><see cref="T:System.Security.Cryptography.MD5">MD5</see> hash string for uploaded file.</returns>
            <remarks>Keep in mind that calculating hash for large files takes a lot of time!
            </remarks>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.CloseInputStream">
            <summary>
            Closes the stream created by the <see cref="P:ElementIT.PowUpload.UploadedFile.InputStream">InputStream</see> property and 
            releases all resources (such as file handles) associated with the stream.
            </summary>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.InputStream">InputStream property</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String,System.Boolean)">
            <summary>
             Copies an uploaded file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="filename">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><b>true</b> if the destination file can be overwritten; otherwise, <b>false</b>.</param>
            <remarks>Use an absolute path at the filename argument. 
            To get the physical path that corresponds to the Web application virtual folder use 
             <see cref="M:System.Web.HttpServerUtility.MapPath(System.String)">Server.Mappath(“”)</see>.
            <para>This method makes a new copy of the uploaded file. 
            If you wish to make just a single copy of the file use 
            the <see cref="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String,System.Boolean)">SaveAs</see> method. 
            It moves the file therefore it works faster.</para></remarks>
            <seealso cref="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String,System.Boolean)">SaveAs method</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String)">
            <summary>
             Copies an uploaded file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="filename">The name of the destination file. This cannot be a directory.</param>
            <remarks>Use an absolute path at the filename argument. 
            To get the physical path that corresponds to the Web application virtual folder use 
             <see cref="M:System.Web.HttpServerUtility.MapPath(System.String)">Server.Mappath(“”)</see>.
            <para>This method makes a new copy of the uploaded file. 
            If you wish to make just a single copy of the file use 
            the <see cref="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String,System.Boolean)">SaveAs</see> method. 
            It moves the file therefore it works faster.</para></remarks> 
            <seealso cref="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String,System.Boolean)">SaveAs method</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String,System.Boolean)">
            <overloads>
            <summary>
             Moves an uploaded file to a new location, providing the option to specify file name.
            </summary>
            </overloads>
            <summary>
             Moves an uploaded file to a new location, providing the option to specify file name. Overwriting a file of the same name is allowed.
            </summary>
            <param name="filename">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><b>true</b> if the destination file can be overwritten; otherwise, <b>false</b>.</param>
            <remarks>Use an absolute path at the filename argument. 
            To get the physical path that corresponds to the Web application virtual folder use 
             <see cref="M:System.Web.HttpServerUtility.MapPath(System.String)">Server.Mappath(“”)</see>.  
            <para>This method <b>moves</b> the file uploaded from the temporary folder to the 
            specified location. So you shouldn't run this method twice. 
            Use the <see cref="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String,System.Boolean)">CopyTo()</see> method if you wish to make multiple copies
            of the same file.</para></remarks>  
            <seealso cref="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String,System.Boolean)">CopyTo method</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.SaveAs(System.String)">
            <summary>
             Moves an uploaded file to a new location, providing the option to specify file name. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="filename">The name of the destination file. This cannot be a directory.</param>
            <remarks>Use an absolute path at the filename argument. 
            To get the physical path that corresponds to the Web application virtual folder use 
             <see cref="M:System.Web.HttpServerUtility.MapPath(System.String)">Server.Mappath(“”)</see>.  
            <para>This method <b>moves</b> the file uploaded from the temporary folder to the 
            specified location. So you shouldn't run this method twice. 
            Use the <see cref="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String,System.Boolean)">CopyTo()</see> method if you wish to make multiple copies
            of the same file.</para></remarks>
            <seealso cref="M:ElementIT.PowUpload.UploadedFile.CopyTo(System.String,System.Boolean)">CopyTo method</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.GetSafeName(System.String)">
            <summary>
             Returns the safe file name and extension of the specified path string.
            </summary>
            <param name="filepath">The path string from which to obtain the file name and extension.</param>
            <returns>A <see cref="T:System.String">String</see> consisting of the characters after the 
            last directory character in file path.</returns>
            <remarks>All characters that are illegal in file names on Windows 
             and not safe relative path substrings like "\\", "..\" are deleted.
            <br/>Use only this method to get a safe file name to save the file
            on the target machine</remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.SafeFileName">SafeFileName property</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.Dispose">
            <summary>
            Forces the release of all resources used by this <b>UploadedFile</b> object
            : Deletes temporary file held by the object, closes stream 
            created by the <see cref="P:ElementIT.PowUpload.UploadedFile.InputStream">InputStream</see> property 
            </summary>
            <remarks>
            You aren't obliged to call this method. NET framework calls it by the 
            <see cref="T:System.GC">Garbage Collector</see> once the <b>UploadedFile</b> object goes out of scope. 
            Do call this method to immediatly release all resources occupied by the object.
            </remarks>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFile.Finalize">
            <summary>
            Executes own <see cref="M:ElementIT.PowUpload.UploadedFile.Dispose">Dispose()</see> method to free 
            resources and perform other cleanup operations before 
            the <see cref="T:System.Object">Object</see> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.CustomData">
            <summary>
             Property of any type allows to store custom data between progress bar calls or
             between progress bar and final file processings script. 
            </summary>
            <value>Any type Object. To pass few types of data use sctructure.</value>
            <remarks>Sample of use: Set here at file processings script that file was saved 
            and at Progress bar page show to user if file was saved or not.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.Rejected">
            <summary>
            Gets a value that indicates whether the file was rejected or not.
            </summary>
            <value><b>true</b>if the uploaded file was rejected; otherwise, <b>false</b>.</value>		
            <remarks>Rejected due to request size limits files willn't be save at hard disk.</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.ContentLength">
            <summary>Gets the size in bytes of an uploaded file.</summary>
            <value>The length of the file.</value>
            <remarks>Returns <b>zero</b> if the file has no content or a user didn't selected
            a file to upload in the Form. To determine whether a file was selected or not
            use the <see cref="P:ElementIT.PowUpload.UploadedFile.FileName">FileName</see> property 
            (an <b>empty</b> string indicates the user didn't selected a file). 
            	</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.ContentType">
            <summary>Gets the MIME content type of a file sent by a client.</summary>
            <value>The MIME content type of the uploaded file.</value>
            <remarks>For the files of the same type the MIME content type may be different
             depending on the browser used by a client. Be careful when using this property
             to define the type of the file. 
            	</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.FieldName">
            <summary>Gets the field name of the file uploaded.</summary>
            <value>The field name of the file uploaded.</value>
            <remarks><b>Field name</b> is a string corresponding to the NAME attribute of 
             an <c>&lt;INPUT TYPE="FILE"&gt;</c> item of the upload Form.
            	</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.TempFileName">
            <summary>Gets the path to the temporary file associated with the file uploaded.</summary>
            <value>The path to the temporary file.</value>
            <remarks>A temporary file is used to store the content of the file uploaded. 
            The temporary file is the same as the target file except for it's name. 
            <para>To store file on server hard disk is better than loading it into memory as 
            the built-in ASP.NET upload support does.</para> 
            <para>The <see cref="M:ElementIT.PowUpload.UploadedFile.Finalize">Destructor</see> or 
            <see cref="M:ElementIT.PowUpload.UploadedFile.Dispose">Dispose</see> method deletes the temporary file.</para>
            	</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.ClientFilePath">
            <summary>Gets full name of the file on the client's computer.</summary>
            <value>The name of the client's file.</value>
            <remarks>
            Empty string indicates the user didn't selected a file.
            <para>Depending on the Operating System and Browser the client use this name 
            may contain characters such as question marks and slashes which are 
            illegal in file names on Windows. Be carefull using this file name to save the file
            on the target machine as the name may contain unsafe relative path 
            substrings like "\\", "..\" or a platform-specific 
            characters that cannot be specified in path like
            quote ("), less than (&lt;), greater than (&gt;), pipe (|), backspace (\b)!</para> 
            <para>Use the <see cref="P:ElementIT.PowUpload.UploadedFile.SafeFileName">SafeFileName</see> property to get a safe file name.</para></remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.SafeFileName">SafeFileName property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.Extension">
            <summary>Gets the file name extension (including the ".")</summary>
            <value>A String containing the extension of the file.</value>
            <remarks>Return value contains the extension of the specified path (including the "."). 
            If the file was not selected by the user or the path have no extension, 
            the value is an <b>empty</b> string.
            	</remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.SafeFileName">SafeFileName property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.ImageWidth">
            <summary>Gets the width of the image in pixels if the file uploaded is an image.</summary>
            <value>The width of the image in pixels.</value>
            <remarks>Returns <b>0</b> if the file uploaded isn't an image.  
            </remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.IsImage">IsImage property</seealso>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.ImageHeight">ImageHeight property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.ImageHeight">
            <summary>Gets the height of the image in pixels if the file uploaded is an image.</summary>
            <value>The height of the image in pixels.</value>
            <remarks>Returns <b>0</b> if the file uploaded isn't an image. 
            	</remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.IsImage">IsImage property</seealso>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.ImageWidth">ImageWidth property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.IsImage">
            <summary>
            Gets a value that indicates whether the uploaded file is an image or not.
            </summary>
            <value><b>true</b> if the uploaded file has a valid image format and 
            if GDI+ supports the pixel format of the file; otherwise, <b>false</b>.</value>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.ImageHeight">ImageHeight property</seealso>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.ImageWidth">ImageWidth property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.IsComplete">
            <summary>
            Gets a value that indicates whether the uploaded file is an fully uploaded.
            </summary>
            <value><b>true</b> if the file was fully uploaded; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.FileName">
            <summary>Gets full name of the file on the client's computer.</summary>
            <value>The name of the client's file.</value>
            <remarks>Returns a value the same as the 
            <see cref="P:ElementIT.PowUpload.UploadedFile.ClientFilePath">ClientFilePath</see> property.</remarks>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.ClientFilePath">ClientFilePath property</seealso>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.SafeFileName">SafeFileName property</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.SafeFileName">
            <summary>Gets a safe file name with an extension.</summary>
            <value>A <see cref="T:System.String">String</see> consisting of the characters after the 
            last directory character in file path.</value>
            <remarks>All characters that are illegal in file names on Windows 
             and not safe relative path substrings like "\\", "..\" are deleted.
            <br/>Use only this property to get a safe file name to save the file
            on the target machine</remarks>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFile.InputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream">Stream</see> object which points to an 
            uploaded file in a temporary folder to prepare for reading the content of the file.
            </summary>
            <value>A <see cref="T:System.IO.Stream">Stream</see> pointing to an uploaded file.</value>
            <seealso cref="P:ElementIT.PowUpload.UploadedFile.TempFileName">TempFileName property</seealso>
        </member>
        <member name="T:ElementIT.PowUpload.UploadedFileCollection">
             <summary>
             Provides access to and organizes files uploaded by a client. 
             </summary>
             <remarks> 
             <para>You cannot create an <b>UploadedFileCollection</b> object directly. 
             You must obtain it from the <see cref="P:ElementIT.PowUpload.PowUpload.Files">Files</see> property of an <see cref="T:ElementIT.PowUpload.PowUpload">PowUpload</see> object.</para></remarks>
            <seealso cref="P:ElementIT.PowUpload.PowUpload.Files">PowUpload.Files property</seealso>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFileCollection.GetKey(System.Int32)">
            <summary>Returns unique key of the file with the specified numerical index in the collection.
            </summary>
            <param name="index">The index of the object name to be returned.</param>
            <value>The field name of the <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> member specified by index.</value>
            <remarks>This method is usefull to determine the field name of the file
            that was uploaded the first (i.e. with index equals to "0"), etc.
            </remarks>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFileCollection.Dispose">
            <summary>
            Forces the release of all resources used by objects in <b>UploadedFileCollection</b>
            : Deletes temporary files held by the objects in <b>UploadedFileCollection</b>, closes <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> streams 
            created by the <see cref="P:ElementIT.PowUpload.UploadedFile.InputStream">InputStream</see> property. 
            </summary>
            <remarks>
            You aren't obliged to call this method. NET framework calls it by the 
            <see cref="T:System.GC">Garbage Collector</see> once the <b>UploadedFileCollection</b> object goes out of scope. 
            Do call this method to immediatly release all resources occupied by <b>UploadedFileCollection</b>.
            </remarks>
        </member>
        <member name="M:ElementIT.PowUpload.UploadedFileCollection.Finalize">
            <summary>
            Executes own <see cref="M:ElementIT.PowUpload.UploadedFileCollection.Dispose">Dispose()</see> method to free 
            resources and perform other cleanup operations before 
            the <see cref="T:System.Object">Object</see> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFileCollection.Item(System.String)">
             <summary>
             Gets an individual <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> object from the file 
             collection by the specified field name.
             </summary>
            <param name="fieldName">The field name of the file corresponding to the NAME attribute of 
             an <c>&lt;INPUT TYPE="FILE"&gt;</c> item of your upload Form.</param>
            <value>The <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> specified by field name.</value>
            <seealso cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile class</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFileCollection.Item(System.Int32)">
             <summary>
             Gets an individual <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> object from the 
             file collection by the specified index.
             </summary>
            <param name="index">The index of the item to get from the file collection.</param>
            <value>The <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> specified by index.</value>
            <seealso cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile class</seealso>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFileCollection.AllKeys">
            <summary>
            Gets a string array containing the keys (field names) of all members in the file collection.
            </summary>
            <value>An array of field names of uploaded files.</value>
        </member>
        <member name="P:ElementIT.PowUpload.UploadedFileCollection.Count">
            <summary>
            Gets the number of <see cref="T:ElementIT.PowUpload.UploadedFile">UploadedFile</see> objects contained within the <b>UploadedFileCollection</b> instance, 
            which corresponds directly to the number of files found within the HTTP POST request.
            </summary>
            <value>The number of objects contained in the <b>UploadedFileCollection</b> instance.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ElementIT.PowUpload.NamespaceDoc" -->
    </members>
</doc>
