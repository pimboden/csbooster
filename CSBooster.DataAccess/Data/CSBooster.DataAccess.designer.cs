#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _4screen.CSB.DataAccess.Data
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "CSBooster.V20")]
    public partial class CSBooster_DataAccessDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void Inserthitbl_NavigationStructure_NST(hitbl_NavigationStructure_NST instance);
        partial void Updatehitbl_NavigationStructure_NST(hitbl_NavigationStructure_NST instance);
        partial void Deletehitbl_NavigationStructure_NST(hitbl_NavigationStructure_NST instance);
        #endregion

        public CSBooster_DataAccessDataContext() :
            base(System.Configuration.ConfigurationManager.ConnectionStrings["CSBoosterConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public CSBooster_DataAccessDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public CSBooster_DataAccessDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public CSBooster_DataAccessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public CSBooster_DataAccessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<hitbl_NavigationStructure_NST> hitbl_NavigationStructure_NSTs
        {
            get
            {
                return this.GetTable<hitbl_NavigationStructure_NST>();
            }
        }

        [Function(Name = "dbo.hisp_Comments_SetCommentStatus")]
        public int hisp_Comments_SetCommentStatus([Parameter(Name = "CommentId", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> commentId, [Parameter(Name = "Status", DbType = "Int")] System.Nullable<int> status)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), commentId, status);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_aspnet_Profile_UpdateLastActivityDate")]
        public int hisp_aspnet_Profile_UpdateLastActivityDate([Parameter(Name = "UserId", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> userId, [Parameter(Name = "CurrentTimeUtc", DbType = "DateTime")] System.Nullable<System.DateTime> currentTimeUtc)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, currentTimeUtc);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_GeoKoordinates_Get")]
        public ISingleResult<hisp_GeoKoordinates_GetResult> hisp_GeoKoordinates_Get([Parameter(Name = "GEO_Street", DbType = "NVarChar(128)")] string gEO_Street, [Parameter(Name = "GEO_PLZ", DbType = "NVarChar(8)")] string gEO_PLZ, [Parameter(Name = "GEO_City", DbType = "NVarChar(50)")] string gEO_City, [Parameter(Name = "GEO_Land", DbType = "NVarChar(5)")] string gEO_Land)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gEO_Street, gEO_PLZ, gEO_City, gEO_Land);
            return ((ISingleResult<hisp_GeoKoordinates_GetResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_GeoKoordinates_Save")]
        public int hisp_GeoKoordinates_Save([Parameter(Name = "GEO_Street", DbType = "NVarChar(128)")] string gEO_Street, [Parameter(Name = "GEO_PLZ", DbType = "NVarChar(8)")] string gEO_PLZ, [Parameter(Name = "GEO_City", DbType = "NVarChar(50)")] string gEO_City, [Parameter(Name = "GEO_Land", DbType = "NVarChar(5)")] string gEO_Land, [Parameter(Name = "GEO_Kanton", DbType = "NVarChar(25)")] string gEO_Kanton, [Parameter(Name = "GEO_Breite", DbType = "Float")] System.Nullable<double> gEO_Breite, [Parameter(Name = "GEO_Laenge", DbType = "Float")] System.Nullable<double> gEO_Laenge)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gEO_Street, gEO_PLZ, gEO_City, gEO_Land, gEO_Kanton, gEO_Breite, gEO_Laenge);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Partners_Load")]
        public ISingleResult<hisp_Partners_LoadResult> hisp_Partners_Load([Parameter(Name = "PAR_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pAR_ID, [Parameter(Name = "USR_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> uSR_ID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pAR_ID, uSR_ID);
            return ((ISingleResult<hisp_Partners_LoadResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Partners_Update")]
        public int hisp_Partners_Update([Parameter(Name = "PAR_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> pAR_ID, [Parameter(Name = "PAR_Name", DbType = "NVarChar(50)")] string pAR_Name, [Parameter(Name = "CTY_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> cTY_ID, [Parameter(Name = "PAR_BaseUrlXSLT", DbType = "NVarChar(128)")] string pAR_BaseUrlXSLT, [Parameter(Name = "PAR_GeoServiceCalls", DbType = "Int")] System.Nullable<int> pAR_GeoServiceCalls, [Parameter(Name = "PAR_RESTCalls", DbType = "Int")] System.Nullable<int> pAR_RESTCalls, [Parameter(Name = "PAR_MonthlyGeoServiceCredits", DbType = "Int")] System.Nullable<int> pAR_MonthlyGeoServiceCredits, [Parameter(Name = "PAR_MonthlyRESTCredits", DbType = "Int")] System.Nullable<int> pAR_MonthlyRESTCredits, [Parameter(Name = "PAR_LastResetDate", DbType = "DateTime")] System.Nullable<System.DateTime> pAR_LastResetDate, [Parameter(Name = "PAR_MobileHeader", DbType = "NVarChar(MAX)")] string pAR_MobileHeader, [Parameter(Name = "PAR_MobileFooter", DbType = "NVarChar(MAX)")] string pAR_MobileFooter)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pAR_ID, pAR_Name, cTY_ID, pAR_BaseUrlXSLT, pAR_GeoServiceCalls, pAR_RESTCalls, pAR_MonthlyGeoServiceCredits, pAR_MonthlyRESTCredits, pAR_LastResetDate, pAR_MobileHeader, pAR_MobileFooter);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_TagWord_GetIDSByWords")]
        public ISingleResult<hisp_TagWord_GetIDSByWordsResult> hisp_TagWord_GetIDSByWords([Parameter(Name = "TagWords", DbType = "NVarChar(MAX)")] string tagWords)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tagWords);
            return ((ISingleResult<hisp_TagWord_GetIDSByWordsResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_UserFriendType_GetTypes")]
        public ISingleResult<hisp_UserFriendType_GetTypesResult> hisp_UserFriendType_GetTypes([Parameter(Name = "LangCode", DbType = "VarChar(10)")] string langCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), langCode);
            return ((ISingleResult<hisp_UserFriendType_GetTypesResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Community_FindGroups")]
        public ISingleResult<hisp_Community_FindGroupsResult> hisp_Community_FindGroups([Parameter(Name = "CommunityId", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> communityID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), communityID);
            return ((ISingleResult<hisp_Community_FindGroupsResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Content_GetContent")]
        public ISingleResult<hisp_Content_GetContentResult> hisp_Content_GetContent([Parameter(Name = "CTY_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> cTY_ID, [Parameter(Name = "CNT_Name", DbType = "NVarChar(50)")] string cNT_Name, [Parameter(Name = "CNT_LangCode", DbType = "NVarChar(10)")] string cNT_LangCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cTY_ID, cNT_Name, cNT_LangCode);
            return ((ISingleResult<hisp_Content_GetContentResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Content_SaveContent")]
        public int hisp_Content_SaveContent([Parameter(Name = "CTY_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> cTY_ID, [Parameter(Name = "CNT_Name", DbType = "NVarChar(50)")] string cNT_Name, [Parameter(Name = "CNT_LangCode", DbType = "NVarChar(10)")] string cNT_LangCode, [Parameter(Name = "CNT_Text", DbType = "NVarChar(MAX)")] string cNT_Text)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cTY_ID, cNT_Name, cNT_LangCode, cNT_Text);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetNavigationForRender")]
        public ISingleResult<hisp_Navigation_GetNavigationForRenderResult> hisp_Navigation_GetNavigationForRender([Parameter(Name = "NST_KeyName", DbType = "NVarChar(50)")] string nST_KeyName, [Parameter(Name = "NAV_LangCode", DbType = "NVarChar(10)")] string nAV_LangCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_KeyName, nAV_LangCode);
            return ((ISingleResult<hisp_Navigation_GetNavigationForRenderResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_SaveNavigationStructure")]
        public int hisp_Navigation_SaveNavigationStructure([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NST_KeyName", DbType = "NVarChar(50)")] string nST_KeyName, [Parameter(Name = "NST_XMLStruct", DbType = "NVarChar(MAX)")] string nST_XMLStruct)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nST_KeyName, nST_XMLStruct);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetNavigationID")]
        public ISingleResult<hisp_Navigation_GetNavigationIDResult> hisp_Navigation_GetNavigationID([Parameter(Name = "NST_KeyName", DbType = "NVarChar(50)")] string nST_KeyName)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_KeyName);
            return ((ISingleResult<hisp_Navigation_GetNavigationIDResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetNavigationLanguageXML")]
        public ISingleResult<hisp_Navigation_GetNavigationLanguageXMLResult> hisp_Navigation_GetNavigationLanguageXML([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NAV_LangCode", DbType = "NVarChar(10)")] string nAV_LangCode)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nAV_LangCode);
            return ((ISingleResult<hisp_Navigation_GetNavigationLanguageXMLResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_SaveNavigationLanguage")]
        public int hisp_Navigation_SaveNavigationLanguage([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NAV_LangCode", DbType = "NVarChar(50)")] string nAV_LangCode, [Parameter(Name = "NAV_XMLNames", DbType = "NVarChar(MAX)")] string nAV_XMLNames, [Parameter(Name = "NAV_XMLNavigation", DbType = "NVarChar(MAX)")] string nAV_XMLNavigation)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nAV_LangCode, nAV_XMLNames, nAV_XMLNavigation);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_DeleteNavigation")]
        public int hisp_Navigation_DeleteNavigation([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_SaveNavigationKeyName")]
        public int hisp_Navigation_SaveNavigationKeyName([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NST_KeyName", DbType = "NVarChar(50)")] string nST_KeyName)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nST_KeyName);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetNavigationKeyName")]
        public ISingleResult<hisp_Navigation_GetNavigationKeyNameResult> hisp_Navigation_GetNavigationKeyName([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID);
            return ((ISingleResult<hisp_Navigation_GetNavigationKeyNameResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_SavePreChache")]
        public int hisp_Navigation_SavePreChache([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NAV_LangCode", DbType = "NVarChar(10)")] string nAV_LangCode, [Parameter(Name = "ASP_RoleName", DbType = "NVarChar(256)")] string aSP_RoleName, [Parameter(Name = "NPC_PreCacheXML", DbType = "NVarChar(MAX)")] string nPC_PreCacheXML)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nAV_LangCode, aSP_RoleName, nPC_PreCacheXML);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetPreChache")]
        public ISingleResult<hisp_Navigation_GetPreChacheResult> hisp_Navigation_GetPreChache([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID, [Parameter(Name = "NAV_LangCode", DbType = "NVarChar(10)")] string nAV_LangCode, [Parameter(Name = "ASP_RoleName", DbType = "NVarChar(256)")] string aSP_RoleName)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID, nAV_LangCode, aSP_RoleName);
            return ((ISingleResult<hisp_Navigation_GetPreChacheResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_User_GetUserLockOut")]
        public ISingleResult<hisp_User_GetUserLockOutResult> hisp_User_GetUserLockOut([Parameter(Name = "UserId", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> userId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
            return ((ISingleResult<hisp_User_GetUserLockOutResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_User_LockUnlockUser")]
        public int hisp_User_LockUnlockUser([Parameter(Name = "UserId", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> userId, [Parameter(Name = "IsLockedOut", DbType = "Bit")] System.Nullable<bool> isLockedOut)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, isLockedOut);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Navigation_GetNavigationStructureXML")]
        public ISingleResult<hisp_Navigation_GetNavigationStructureXMLResult> hisp_Navigation_GetNavigationStructureXML([Parameter(Name = "NST_ID", DbType = "UniqueIdentifier")] System.Nullable<System.Guid> nST_ID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nST_ID);
            return ((ISingleResult<hisp_Navigation_GetNavigationStructureXMLResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_Community_GetIDSByVUrls")]
        public ISingleResult<hisp_Community_GetIDSByVUrlsResult> hisp_Community_GetIDSByVUrls([Parameter(Name = "CommunityNames", DbType = "NVarChar(MAX)")] string communityNames)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), communityNames);
            return ((ISingleResult<hisp_Community_GetIDSByVUrlsResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.hisp_DataObjectTag_GetAllButSynonyms")]
        public ISingleResult<hisp_DataObjectTag_GetAllButSynonymsResult> hisp_DataObjectTag_GetAllButSynonyms()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((ISingleResult<hisp_DataObjectTag_GetAllButSynonymsResult>)(result.ReturnValue));
        }
    }

    [Table(Name = "dbo.hitbl_NavigationStructure_NST")]
    public partial class hitbl_NavigationStructure_NST : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _NST_ID;

        private string _NST_KeyName;

        private string _NST_XMLStruct;

        private bool _NST_IsDirty;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNST_IDChanging(System.Guid value);
        partial void OnNST_IDChanged();
        partial void OnNST_KeyNameChanging(string value);
        partial void OnNST_KeyNameChanged();
        partial void OnNST_XMLStructChanging(string value);
        partial void OnNST_XMLStructChanged();
        partial void OnNST_IsDirtyChanging(bool value);
        partial void OnNST_IsDirtyChanged();
        #endregion

        public hitbl_NavigationStructure_NST()
        {
            OnCreated();
        }

        [Column(Storage = "_NST_ID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid NST_ID
        {
            get
            {
                return this._NST_ID;
            }
            set
            {
                if ((this._NST_ID != value))
                {
                    this.OnNST_IDChanging(value);
                    this.SendPropertyChanging();
                    this._NST_ID = value;
                    this.SendPropertyChanged("NST_ID");
                    this.OnNST_IDChanged();
                }
            }
        }

        [Column(Storage = "_NST_KeyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string NST_KeyName
        {
            get
            {
                return this._NST_KeyName;
            }
            set
            {
                if ((this._NST_KeyName != value))
                {
                    this.OnNST_KeyNameChanging(value);
                    this.SendPropertyChanging();
                    this._NST_KeyName = value;
                    this.SendPropertyChanged("NST_KeyName");
                    this.OnNST_KeyNameChanged();
                }
            }
        }

        [Column(Storage = "_NST_XMLStruct", DbType = "NVarChar(MAX)")]
        public string NST_XMLStruct
        {
            get
            {
                return this._NST_XMLStruct;
            }
            set
            {
                if ((this._NST_XMLStruct != value))
                {
                    this.OnNST_XMLStructChanging(value);
                    this.SendPropertyChanging();
                    this._NST_XMLStruct = value;
                    this.SendPropertyChanged("NST_XMLStruct");
                    this.OnNST_XMLStructChanged();
                }
            }
        }

        [Column(Storage = "_NST_IsDirty", DbType = "Bit NOT NULL")]
        public bool NST_IsDirty
        {
            get
            {
                return this._NST_IsDirty;
            }
            set
            {
                if ((this._NST_IsDirty != value))
                {
                    this.OnNST_IsDirtyChanging(value);
                    this.SendPropertyChanging();
                    this._NST_IsDirty = value;
                    this.SendPropertyChanged("NST_IsDirty");
                    this.OnNST_IsDirtyChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public partial class hisp_GeoKoordinates_GetResult
    {

        private string _GEO_Street;

        private string _GEO_PLZ;

        private string _GEO_City;

        private string _GEO_Kanton;

        private string _GEO_Land;

        private double _GEO_Breite;

        private double _GEO_Laenge;

        public hisp_GeoKoordinates_GetResult()
        {
        }

        [Column(Storage = "_GEO_Street", DbType = "NVarChar(128)")]
        public string GEO_Street
        {
            get
            {
                return this._GEO_Street;
            }
            set
            {
                if ((this._GEO_Street != value))
                {
                    this._GEO_Street = value;
                }
            }
        }

        [Column(Storage = "_GEO_PLZ", DbType = "NVarChar(8) NOT NULL", CanBeNull = false)]
        public string GEO_PLZ
        {
            get
            {
                return this._GEO_PLZ;
            }
            set
            {
                if ((this._GEO_PLZ != value))
                {
                    this._GEO_PLZ = value;
                }
            }
        }

        [Column(Storage = "_GEO_City", DbType = "NVarChar(50)")]
        public string GEO_City
        {
            get
            {
                return this._GEO_City;
            }
            set
            {
                if ((this._GEO_City != value))
                {
                    this._GEO_City = value;
                }
            }
        }

        [Column(Storage = "_GEO_Kanton", DbType = "NVarChar(25)")]
        public string GEO_Kanton
        {
            get
            {
                return this._GEO_Kanton;
            }
            set
            {
                if ((this._GEO_Kanton != value))
                {
                    this._GEO_Kanton = value;
                }
            }
        }

        [Column(Storage = "_GEO_Land", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string GEO_Land
        {
            get
            {
                return this._GEO_Land;
            }
            set
            {
                if ((this._GEO_Land != value))
                {
                    this._GEO_Land = value;
                }
            }
        }

        [Column(Storage = "_GEO_Breite", DbType = "Float NOT NULL")]
        public double GEO_Breite
        {
            get
            {
                return this._GEO_Breite;
            }
            set
            {
                if ((this._GEO_Breite != value))
                {
                    this._GEO_Breite = value;
                }
            }
        }

        [Column(Storage = "_GEO_Laenge", DbType = "Float NOT NULL")]
        public double GEO_Laenge
        {
            get
            {
                return this._GEO_Laenge;
            }
            set
            {
                if ((this._GEO_Laenge != value))
                {
                    this._GEO_Laenge = value;
                }
            }
        }
    }

    public partial class hisp_Partners_LoadResult
    {

        private System.Guid _USR_ID;

        private System.Guid _PAR_ID;

        private System.Guid _PAR_ID1;

        private string _PAR_Name;

        private System.Guid _CTY_ID;

        private string _PAR_BaseUrlXSLT;

        private int _PAR_GeoServiceCalls;

        private int _PAR_RESTCalls;

        private int _PAR_MonthlyGeoServiceCredits;

        private int _PAR_MonthlyRESTCredits;

        private System.DateTime _PAR_LastResetDate;

        private string _PAR_MobileHeader;

        private string _PAR_MobileFooter;

        public hisp_Partners_LoadResult()
        {
        }

        [Column(Storage = "_USR_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid USR_ID
        {
            get
            {
                return this._USR_ID;
            }
            set
            {
                if ((this._USR_ID != value))
                {
                    this._USR_ID = value;
                }
            }
        }

        [Column(Storage = "_PAR_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid PAR_ID
        {
            get
            {
                return this._PAR_ID;
            }
            set
            {
                if ((this._PAR_ID != value))
                {
                    this._PAR_ID = value;
                }
            }
        }

        [Column(Storage = "_PAR_ID1", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid PAR_ID1
        {
            get
            {
                return this._PAR_ID1;
            }
            set
            {
                if ((this._PAR_ID1 != value))
                {
                    this._PAR_ID1 = value;
                }
            }
        }

        [Column(Storage = "_PAR_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string PAR_Name
        {
            get
            {
                return this._PAR_Name;
            }
            set
            {
                if ((this._PAR_Name != value))
                {
                    this._PAR_Name = value;
                }
            }
        }

        [Column(Storage = "_CTY_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid CTY_ID
        {
            get
            {
                return this._CTY_ID;
            }
            set
            {
                if ((this._CTY_ID != value))
                {
                    this._CTY_ID = value;
                }
            }
        }

        [Column(Storage = "_PAR_BaseUrlXSLT", DbType = "NVarChar(128)")]
        public string PAR_BaseUrlXSLT
        {
            get
            {
                return this._PAR_BaseUrlXSLT;
            }
            set
            {
                if ((this._PAR_BaseUrlXSLT != value))
                {
                    this._PAR_BaseUrlXSLT = value;
                }
            }
        }

        [Column(Storage = "_PAR_GeoServiceCalls", DbType = "Int NOT NULL")]
        public int PAR_GeoServiceCalls
        {
            get
            {
                return this._PAR_GeoServiceCalls;
            }
            set
            {
                if ((this._PAR_GeoServiceCalls != value))
                {
                    this._PAR_GeoServiceCalls = value;
                }
            }
        }

        [Column(Storage = "_PAR_RESTCalls", DbType = "Int NOT NULL")]
        public int PAR_RESTCalls
        {
            get
            {
                return this._PAR_RESTCalls;
            }
            set
            {
                if ((this._PAR_RESTCalls != value))
                {
                    this._PAR_RESTCalls = value;
                }
            }
        }

        [Column(Storage = "_PAR_MonthlyGeoServiceCredits", DbType = "Int NOT NULL")]
        public int PAR_MonthlyGeoServiceCredits
        {
            get
            {
                return this._PAR_MonthlyGeoServiceCredits;
            }
            set
            {
                if ((this._PAR_MonthlyGeoServiceCredits != value))
                {
                    this._PAR_MonthlyGeoServiceCredits = value;
                }
            }
        }

        [Column(Storage = "_PAR_MonthlyRESTCredits", DbType = "Int NOT NULL")]
        public int PAR_MonthlyRESTCredits
        {
            get
            {
                return this._PAR_MonthlyRESTCredits;
            }
            set
            {
                if ((this._PAR_MonthlyRESTCredits != value))
                {
                    this._PAR_MonthlyRESTCredits = value;
                }
            }
        }

        [Column(Storage = "_PAR_LastResetDate", DbType = "DateTime NOT NULL")]
        public System.DateTime PAR_LastResetDate
        {
            get
            {
                return this._PAR_LastResetDate;
            }
            set
            {
                if ((this._PAR_LastResetDate != value))
                {
                    this._PAR_LastResetDate = value;
                }
            }
        }

        [Column(Storage = "_PAR_MobileHeader", DbType = "NVarChar(MAX)")]
        public string PAR_MobileHeader
        {
            get
            {
                return this._PAR_MobileHeader;
            }
            set
            {
                if ((this._PAR_MobileHeader != value))
                {
                    this._PAR_MobileHeader = value;
                }
            }
        }

        [Column(Storage = "_PAR_MobileFooter", DbType = "NVarChar(MAX)")]
        public string PAR_MobileFooter
        {
            get
            {
                return this._PAR_MobileFooter;
            }
            set
            {
                if ((this._PAR_MobileFooter != value))
                {
                    this._PAR_MobileFooter = value;
                }
            }
        }
    }

    public partial class hisp_TagWord_GetIDSByWordsResult
    {

        private System.Guid _TGW_ID;

        public hisp_TagWord_GetIDSByWordsResult()
        {
        }

        [Column(Storage = "_TGW_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid TGW_ID
        {
            get
            {
                return this._TGW_ID;
            }
            set
            {
                if ((this._TGW_ID != value))
                {
                    this._TGW_ID = value;
                }
            }
        }
    }

    public partial class hisp_UserFriendType_GetTypesResult
    {

        private int _UFR_TypeID;

        private string _UFT_TypeName;

        public hisp_UserFriendType_GetTypesResult()
        {
        }

        [Column(Storage = "_UFR_TypeID", DbType = "Int NOT NULL")]
        public int UFR_TypeID
        {
            get
            {
                return this._UFR_TypeID;
            }
            set
            {
                if ((this._UFR_TypeID != value))
                {
                    this._UFR_TypeID = value;
                }
            }
        }

        [Column(Storage = "_UFT_TypeName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string UFT_TypeName
        {
            get
            {
                return this._UFT_TypeName;
            }
            set
            {
                if ((this._UFT_TypeName != value))
                {
                    this._UFT_TypeName = value;
                }
            }
        }
    }

    public partial class hisp_Community_FindGroupsResult
    {

        private System.Guid _OBJ_ID;

        public hisp_Community_FindGroupsResult()
        {
        }

        [Column(Storage = "_OBJ_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid OBJ_ID
        {
            get
            {
                return this._OBJ_ID;
            }
            set
            {
                if ((this._OBJ_ID != value))
                {
                    this._OBJ_ID = value;
                }
            }
        }
    }

    public partial class hisp_Content_GetContentResult
    {

        private string _Content;

        public hisp_Content_GetContentResult()
        {
        }

        [Column(Storage = "_Content", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false)]
        public string Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if ((this._Content != value))
                {
                    this._Content = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetNavigationForRenderResult
    {

        private string _NAV_XMLNavigation;

        public hisp_Navigation_GetNavigationForRenderResult()
        {
        }

        [Column(Storage = "_NAV_XMLNavigation", DbType = "NVarChar(MAX)")]
        public string NAV_XMLNavigation
        {
            get
            {
                return this._NAV_XMLNavigation;
            }
            set
            {
                if ((this._NAV_XMLNavigation != value))
                {
                    this._NAV_XMLNavigation = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetNavigationIDResult
    {

        private System.Guid _NST_ID;

        public hisp_Navigation_GetNavigationIDResult()
        {
        }

        [Column(Storage = "_NST_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid NST_ID
        {
            get
            {
                return this._NST_ID;
            }
            set
            {
                if ((this._NST_ID != value))
                {
                    this._NST_ID = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetNavigationLanguageXMLResult
    {

        private string _NAV_XMLNames;

        public hisp_Navigation_GetNavigationLanguageXMLResult()
        {
        }

        [Column(Storage = "_NAV_XMLNames", DbType = "NVarChar(MAX)")]
        public string NAV_XMLNames
        {
            get
            {
                return this._NAV_XMLNames;
            }
            set
            {
                if ((this._NAV_XMLNames != value))
                {
                    this._NAV_XMLNames = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetNavigationKeyNameResult
    {

        private string _NST_KeyName;

        public hisp_Navigation_GetNavigationKeyNameResult()
        {
        }

        [Column(Storage = "_NST_KeyName", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string NST_KeyName
        {
            get
            {
                return this._NST_KeyName;
            }
            set
            {
                if ((this._NST_KeyName != value))
                {
                    this._NST_KeyName = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetPreChacheResult
    {

        private string _NPC_PreCacheXML;

        public hisp_Navigation_GetPreChacheResult()
        {
        }

        [Column(Storage = "_NPC_PreCacheXML", DbType = "NVarChar(MAX)")]
        public string NPC_PreCacheXML
        {
            get
            {
                return this._NPC_PreCacheXML;
            }
            set
            {
                if ((this._NPC_PreCacheXML != value))
                {
                    this._NPC_PreCacheXML = value;
                }
            }
        }
    }

    public partial class hisp_User_GetUserLockOutResult
    {

        private bool _IsLockedOut;

        public hisp_User_GetUserLockOutResult()
        {
        }

        [Column(Storage = "_IsLockedOut", DbType = "Bit NOT NULL")]
        public bool IsLockedOut
        {
            get
            {
                return this._IsLockedOut;
            }
            set
            {
                if ((this._IsLockedOut != value))
                {
                    this._IsLockedOut = value;
                }
            }
        }
    }

    public partial class hisp_Navigation_GetNavigationStructureXMLResult
    {

        private string _NST_XMLStruct;

        private bool _NST_IsDirty;

        public hisp_Navigation_GetNavigationStructureXMLResult()
        {
        }

        [Column(Storage = "_NST_XMLStruct", DbType = "NVarChar(MAX)")]
        public string NST_XMLStruct
        {
            get
            {
                return this._NST_XMLStruct;
            }
            set
            {
                if ((this._NST_XMLStruct != value))
                {
                    this._NST_XMLStruct = value;
                }
            }
        }

        [Column(Storage = "_NST_IsDirty", DbType = "Bit NOT NULL")]
        public bool NST_IsDirty
        {
            get
            {
                return this._NST_IsDirty;
            }
            set
            {
                if ((this._NST_IsDirty != value))
                {
                    this._NST_IsDirty = value;
                }
            }
        }
    }

    public partial class hisp_Community_GetIDSByVUrlsResult
    {

        private System.Nullable<System.Guid> _CTY_ID;

        private string _CTY_VirtualUrl;

        public hisp_Community_GetIDSByVUrlsResult()
        {
        }

        [Column(Storage = "_CTY_ID", DbType = "UniqueIdentifier")]
        public System.Nullable<System.Guid> CTY_ID
        {
            get
            {
                return this._CTY_ID;
            }
            set
            {
                if ((this._CTY_ID != value))
                {
                    this._CTY_ID = value;
                }
            }
        }

        [Column(Storage = "_CTY_VirtualUrl", DbType = "NVarChar(100)")]
        public string CTY_VirtualUrl
        {
            get
            {
                return this._CTY_VirtualUrl;
            }
            set
            {
                if ((this._CTY_VirtualUrl != value))
                {
                    this._CTY_VirtualUrl = value;
                }
            }
        }
    }

    public partial class hisp_DataObjectTag_GetAllButSynonymsResult
    {

        private System.Guid _OBJ_ID;

        private string _OBJ_Title;

        private int _OBJ_Type;

        public hisp_DataObjectTag_GetAllButSynonymsResult()
        {
        }

        [Column(Storage = "_OBJ_ID", DbType = "UniqueIdentifier NOT NULL")]
        public System.Guid OBJ_ID
        {
            get
            {
                return this._OBJ_ID;
            }
            set
            {
                if ((this._OBJ_ID != value))
                {
                    this._OBJ_ID = value;
                }
            }
        }

        [Column(Storage = "_OBJ_Title", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string OBJ_Title
        {
            get
            {
                return this._OBJ_Title;
            }
            set
            {
                if ((this._OBJ_Title != value))
                {
                    this._OBJ_Title = value;
                }
            }
        }

        [Column(Storage = "_OBJ_Type", DbType = "Int NOT NULL")]
        public int OBJ_Type
        {
            get
            {
                return this._OBJ_Type;
            }
            set
            {
                if ((this._OBJ_Type != value))
                {
                    this._OBJ_Type = value;
                }
            }
        }
    }
}
#pragma warning restore 1591
