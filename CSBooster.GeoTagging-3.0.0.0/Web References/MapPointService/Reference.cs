//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1434.
// 

#pragma warning disable 1591

namespace _4screen.CSB.GeoTagging.MapPointService
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Web.Services.WebServiceBinding(Name = "CommonServiceSoap", Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlInclude(typeof (MapPointConstants))]
    [System.Xml.Serialization.XmlInclude(typeof (FindResult[]))]
    public partial class CommonServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private CustomerInfoHeader customerInfoHeaderValueField;

        private UserInfoHeader userInfoHeaderValueField;

        private System.Threading.SendOrPostCallback GetVersionInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetCountryRegionInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetEntityTypesOperationCompleted;

        private System.Threading.SendOrPostCallback GetDataSourceInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetGreatCircleDistancesOperationCompleted;

        private System.Threading.SendOrPostCallback GetClientTokenOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public CommonServiceSoap()
        {
            Url = global::_4screen.CSB.GeoTagging.Properties.Settings.Default.CSBooster_GeoTagging_MapPointService_CommonService;
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public CustomerInfoHeader CustomerInfoHeaderValue
        {
            get { return customerInfoHeaderValueField; }
            set { customerInfoHeaderValueField = value; }
        }

        public UserInfoHeader UserInfoHeaderValue
        {
            get { return userInfoHeaderValueField; }
            set { userInfoHeaderValueField = value; }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true) && (useDefaultCredentialsSetExplicitly == false)) && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetVersionInfoCompletedEventHandler GetVersionInfoCompleted;

        /// <remarks/>
        public event GetCountryRegionInfoCompletedEventHandler GetCountryRegionInfoCompleted;

        /// <remarks/>
        public event GetEntityTypesCompletedEventHandler GetEntityTypesCompleted;

        /// <remarks/>
        public event GetDataSourceInfoCompletedEventHandler GetDataSourceInfoCompleted;

        /// <remarks/>
        public event GetGreatCircleDistancesCompletedEventHandler GetGreatCircleDistancesCompleted;

        /// <remarks/>
        public event GetClientTokenCompletedEventHandler GetClientTokenCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetVersionInfo", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VersionInfo[] GetVersionInfo()
        {
            object[] results = Invoke("GetVersionInfo", new object[0]);
            return ((VersionInfo[]) (results[0]));
        }

        /// <remarks/>
        public void GetVersionInfoAsync()
        {
            GetVersionInfoAsync(null);
        }

        /// <remarks/>
        public void GetVersionInfoAsync(object userState)
        {
            if ((GetVersionInfoOperationCompleted == null))
            {
                GetVersionInfoOperationCompleted = new System.Threading.SendOrPostCallback(OnGetVersionInfoOperationCompleted);
            }
            InvokeAsync("GetVersionInfo", new object[0], GetVersionInfoOperationCompleted, userState);
        }

        private void OnGetVersionInfoOperationCompleted(object arg)
        {
            if ((GetVersionInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetVersionInfoCompleted(this, new GetVersionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetCountryRegionInfo", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountryRegionInfo[] GetCountryRegionInfo(int[] entityIDs)
        {
            object[] results = Invoke("GetCountryRegionInfo", new object[] {entityIDs});
            return ((CountryRegionInfo[]) (results[0]));
        }

        /// <remarks/>
        public void GetCountryRegionInfoAsync(int[] entityIDs)
        {
            GetCountryRegionInfoAsync(entityIDs, null);
        }

        /// <remarks/>
        public void GetCountryRegionInfoAsync(int[] entityIDs, object userState)
        {
            if ((GetCountryRegionInfoOperationCompleted == null))
            {
                GetCountryRegionInfoOperationCompleted = new System.Threading.SendOrPostCallback(OnGetCountryRegionInfoOperationCompleted);
            }
            InvokeAsync("GetCountryRegionInfo", new object[] {entityIDs}, GetCountryRegionInfoOperationCompleted, userState);
        }

        private void OnGetCountryRegionInfoOperationCompleted(object arg)
        {
            if ((GetCountryRegionInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetCountryRegionInfoCompleted(this, new GetCountryRegionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetEntityTypes", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EntityType[] GetEntityTypes(string dataSourceName)
        {
            object[] results = Invoke("GetEntityTypes", new object[] {dataSourceName});
            return ((EntityType[]) (results[0]));
        }

        /// <remarks/>
        public void GetEntityTypesAsync(string dataSourceName)
        {
            GetEntityTypesAsync(dataSourceName, null);
        }

        /// <remarks/>
        public void GetEntityTypesAsync(string dataSourceName, object userState)
        {
            if ((GetEntityTypesOperationCompleted == null))
            {
                GetEntityTypesOperationCompleted = new System.Threading.SendOrPostCallback(OnGetEntityTypesOperationCompleted);
            }
            InvokeAsync("GetEntityTypes", new object[] {dataSourceName}, GetEntityTypesOperationCompleted, userState);
        }

        private void OnGetEntityTypesOperationCompleted(object arg)
        {
            if ((GetEntityTypesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetEntityTypesCompleted(this, new GetEntityTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetDataSourceInfo", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataSource[] GetDataSourceInfo(string[] dataSourceNames)
        {
            object[] results = Invoke("GetDataSourceInfo", new object[] {dataSourceNames});
            return ((DataSource[]) (results[0]));
        }

        /// <remarks/>
        public void GetDataSourceInfoAsync(string[] dataSourceNames)
        {
            GetDataSourceInfoAsync(dataSourceNames, null);
        }

        /// <remarks/>
        public void GetDataSourceInfoAsync(string[] dataSourceNames, object userState)
        {
            if ((GetDataSourceInfoOperationCompleted == null))
            {
                GetDataSourceInfoOperationCompleted = new System.Threading.SendOrPostCallback(OnGetDataSourceInfoOperationCompleted);
            }
            InvokeAsync("GetDataSourceInfo", new object[] {dataSourceNames}, GetDataSourceInfoOperationCompleted, userState);
        }

        private void OnGetDataSourceInfoOperationCompleted(object arg)
        {
            if ((GetDataSourceInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetDataSourceInfoCompleted(this, new GetDataSourceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetGreatCircleDistances", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double[] GetGreatCircleDistances(LatLong[] latLongs)
        {
            object[] results = Invoke("GetGreatCircleDistances", new object[] {latLongs});
            return ((double[]) (results[0]));
        }

        /// <remarks/>
        public void GetGreatCircleDistancesAsync(LatLong[] latLongs)
        {
            GetGreatCircleDistancesAsync(latLongs, null);
        }

        /// <remarks/>
        public void GetGreatCircleDistancesAsync(LatLong[] latLongs, object userState)
        {
            if ((GetGreatCircleDistancesOperationCompleted == null))
            {
                GetGreatCircleDistancesOperationCompleted = new System.Threading.SendOrPostCallback(OnGetGreatCircleDistancesOperationCompleted);
            }
            InvokeAsync("GetGreatCircleDistances", new object[] {latLongs}, GetGreatCircleDistancesOperationCompleted, userState);
        }

        private void OnGetGreatCircleDistancesOperationCompleted(object arg)
        {
            if ((GetGreatCircleDistancesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetGreatCircleDistancesCompleted(this, new GetGreatCircleDistancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetClientToken", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientToken(TokenSpecification specification)
        {
            object[] results = Invoke("GetClientToken", new object[] {specification});
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetClientTokenAsync(TokenSpecification specification)
        {
            GetClientTokenAsync(specification, null);
        }

        /// <remarks/>
        public void GetClientTokenAsync(TokenSpecification specification, object userState)
        {
            if ((GetClientTokenOperationCompleted == null))
            {
                GetClientTokenOperationCompleted = new System.Threading.SendOrPostCallback(OnGetClientTokenOperationCompleted);
            }
            InvokeAsync("GetClientToken", new object[] {specification}, GetClientTokenOperationCompleted, userState);
        }

        private void OnGetClientTokenOperationCompleted(object arg)
        {
            if ((GetClientTokenCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetClientTokenCompleted(this, new GetClientTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null) || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Web.Services.WebServiceBinding(Name = "FindServiceSoap", Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlInclude(typeof (MapPointConstants))]
    [System.Xml.Serialization.XmlInclude(typeof (FindResult[]))]
    public partial class FindServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private CustomerInfoFindHeader customerInfoFindHeaderValueField;

        private UserInfoFindHeader userInfoFindHeaderValueField;

        private System.Threading.SendOrPostCallback FindOperationCompleted;

        private System.Threading.SendOrPostCallback FindAddressOperationCompleted;

        private System.Threading.SendOrPostCallback ParseAddressOperationCompleted;

        private System.Threading.SendOrPostCallback GetLocationInfoOperationCompleted;

        private System.Threading.SendOrPostCallback FindNearbyOperationCompleted;

        private System.Threading.SendOrPostCallback FindByPropertyOperationCompleted;

        private System.Threading.SendOrPostCallback FindByIDOperationCompleted;

        private System.Threading.SendOrPostCallback FindNearRouteOperationCompleted;

        private System.Threading.SendOrPostCallback FindPolygonOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public FindServiceSoap()
        {
            Url = "http://findv3.staging.mappoint.net/Find-30/FindService.asmx";
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public CustomerInfoFindHeader CustomerInfoFindHeaderValue
        {
            get { return customerInfoFindHeaderValueField; }
            set { customerInfoFindHeaderValueField = value; }
        }

        public UserInfoFindHeader UserInfoFindHeaderValue
        {
            get { return userInfoFindHeaderValueField; }
            set { userInfoFindHeaderValueField = value; }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true) && (useDefaultCredentialsSetExplicitly == false)) && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event FindCompletedEventHandler FindCompleted;

        /// <remarks/>
        public event FindAddressCompletedEventHandler FindAddressCompleted;

        /// <remarks/>
        public event ParseAddressCompletedEventHandler ParseAddressCompleted;

        /// <remarks/>
        public event GetLocationInfoCompletedEventHandler GetLocationInfoCompleted;

        /// <remarks/>
        public event FindNearbyCompletedEventHandler FindNearbyCompleted;

        /// <remarks/>
        public event FindByPropertyCompletedEventHandler FindByPropertyCompleted;

        /// <remarks/>
        public event FindByIDCompletedEventHandler FindByIDCompleted;

        /// <remarks/>
        public event FindNearRouteCompletedEventHandler FindNearRouteCompleted;

        /// <remarks/>
        public event FindPolygonCompletedEventHandler FindPolygonCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/Find", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults Find(FindSpecification specification)
        {
            object[] results = Invoke("Find", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindAsync(FindSpecification specification)
        {
            FindAsync(specification, null);
        }

        /// <remarks/>
        public void FindAsync(FindSpecification specification, object userState)
        {
            if ((FindOperationCompleted == null))
            {
                FindOperationCompleted = new System.Threading.SendOrPostCallback(OnFindOperationCompleted);
            }
            InvokeAsync("Find", new object[] {specification}, FindOperationCompleted, userState);
        }

        private void OnFindOperationCompleted(object arg)
        {
            if ((FindCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindCompleted(this, new FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindAddress", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindAddress(FindAddressSpecification specification)
        {
            object[] results = Invoke("FindAddress", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindAddressAsync(FindAddressSpecification specification)
        {
            FindAddressAsync(specification, null);
        }

        /// <remarks/>
        public void FindAddressAsync(FindAddressSpecification specification, object userState)
        {
            if ((FindAddressOperationCompleted == null))
            {
                FindAddressOperationCompleted = new System.Threading.SendOrPostCallback(OnFindAddressOperationCompleted);
            }
            InvokeAsync("FindAddress", new object[] {specification}, FindAddressOperationCompleted, userState);
        }

        private void OnFindAddressOperationCompleted(object arg)
        {
            if ((FindAddressCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindAddressCompleted(this, new FindAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/ParseAddress", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Address ParseAddress(string inputAddress, string countryRegion)
        {
            object[] results = Invoke("ParseAddress", new object[] {inputAddress, countryRegion});
            return ((Address) (results[0]));
        }

        /// <remarks/>
        public void ParseAddressAsync(string inputAddress, string countryRegion)
        {
            ParseAddressAsync(inputAddress, countryRegion, null);
        }

        /// <remarks/>
        public void ParseAddressAsync(string inputAddress, string countryRegion, object userState)
        {
            if ((ParseAddressOperationCompleted == null))
            {
                ParseAddressOperationCompleted = new System.Threading.SendOrPostCallback(OnParseAddressOperationCompleted);
            }
            InvokeAsync("ParseAddress", new object[] {inputAddress, countryRegion}, ParseAddressOperationCompleted, userState);
        }

        private void OnParseAddressOperationCompleted(object arg)
        {
            if ((ParseAddressCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                ParseAddressCompleted(this, new ParseAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetLocationInfo", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Location[] GetLocationInfo(LatLong location, string dataSourceName, GetInfoOptions options)
        {
            object[] results = Invoke("GetLocationInfo", new object[] {location, dataSourceName, options});
            return ((Location[]) (results[0]));
        }

        /// <remarks/>
        public void GetLocationInfoAsync(LatLong location, string dataSourceName, GetInfoOptions options)
        {
            GetLocationInfoAsync(location, dataSourceName, options, null);
        }

        /// <remarks/>
        public void GetLocationInfoAsync(LatLong location, string dataSourceName, GetInfoOptions options, object userState)
        {
            if ((GetLocationInfoOperationCompleted == null))
            {
                GetLocationInfoOperationCompleted = new System.Threading.SendOrPostCallback(OnGetLocationInfoOperationCompleted);
            }
            InvokeAsync("GetLocationInfo", new object[] {location, dataSourceName, options}, GetLocationInfoOperationCompleted, userState);
        }

        private void OnGetLocationInfoOperationCompleted(object arg)
        {
            if ((GetLocationInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetLocationInfoCompleted(this, new GetLocationInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindNearby", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindNearby(FindNearbySpecification specification)
        {
            object[] results = Invoke("FindNearby", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindNearbyAsync(FindNearbySpecification specification)
        {
            FindNearbyAsync(specification, null);
        }

        /// <remarks/>
        public void FindNearbyAsync(FindNearbySpecification specification, object userState)
        {
            if ((FindNearbyOperationCompleted == null))
            {
                FindNearbyOperationCompleted = new System.Threading.SendOrPostCallback(OnFindNearbyOperationCompleted);
            }
            InvokeAsync("FindNearby", new object[] {specification}, FindNearbyOperationCompleted, userState);
        }

        private void OnFindNearbyOperationCompleted(object arg)
        {
            if ((FindNearbyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindNearbyCompleted(this, new FindNearbyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindByProperty", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindByProperty(FindByPropertySpecification specification)
        {
            object[] results = Invoke("FindByProperty", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindByPropertyAsync(FindByPropertySpecification specification)
        {
            FindByPropertyAsync(specification, null);
        }

        /// <remarks/>
        public void FindByPropertyAsync(FindByPropertySpecification specification, object userState)
        {
            if ((FindByPropertyOperationCompleted == null))
            {
                FindByPropertyOperationCompleted = new System.Threading.SendOrPostCallback(OnFindByPropertyOperationCompleted);
            }
            InvokeAsync("FindByProperty", new object[] {specification}, FindByPropertyOperationCompleted, userState);
        }

        private void OnFindByPropertyOperationCompleted(object arg)
        {
            if ((FindByPropertyCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindByPropertyCompleted(this, new FindByPropertyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindByID", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindByID(FindByIDSpecification specification)
        {
            object[] results = Invoke("FindByID", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindByIDAsync(FindByIDSpecification specification)
        {
            FindByIDAsync(specification, null);
        }

        /// <remarks/>
        public void FindByIDAsync(FindByIDSpecification specification, object userState)
        {
            if ((FindByIDOperationCompleted == null))
            {
                FindByIDOperationCompleted = new System.Threading.SendOrPostCallback(OnFindByIDOperationCompleted);
            }
            InvokeAsync("FindByID", new object[] {specification}, FindByIDOperationCompleted, userState);
        }

        private void OnFindByIDOperationCompleted(object arg)
        {
            if ((FindByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindByIDCompleted(this, new FindByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindNearRoute", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindNearRoute(FindNearRouteSpecification specification)
        {
            object[] results = Invoke("FindNearRoute", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindNearRouteAsync(FindNearRouteSpecification specification)
        {
            FindNearRouteAsync(specification, null);
        }

        /// <remarks/>
        public void FindNearRouteAsync(FindNearRouteSpecification specification, object userState)
        {
            if ((FindNearRouteOperationCompleted == null))
            {
                FindNearRouteOperationCompleted = new System.Threading.SendOrPostCallback(OnFindNearRouteOperationCompleted);
            }
            InvokeAsync("FindNearRoute", new object[] {specification}, FindNearRouteOperationCompleted, userState);
        }

        private void OnFindNearRouteOperationCompleted(object arg)
        {
            if ((FindNearRouteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindNearRouteCompleted(this, new FindNearRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/FindPolygon", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindPolygon(FindPolygonSpecification specification)
        {
            object[] results = Invoke("FindPolygon", new object[] {specification});
            return ((FindResults) (results[0]));
        }

        /// <remarks/>
        public void FindPolygonAsync(FindPolygonSpecification specification)
        {
            FindPolygonAsync(specification, null);
        }

        /// <remarks/>
        public void FindPolygonAsync(FindPolygonSpecification specification, object userState)
        {
            if ((FindPolygonOperationCompleted == null))
            {
                FindPolygonOperationCompleted = new System.Threading.SendOrPostCallback(OnFindPolygonOperationCompleted);
            }
            InvokeAsync("FindPolygon", new object[] {specification}, FindPolygonOperationCompleted, userState);
        }

        private void OnFindPolygonOperationCompleted(object arg)
        {
            if ((FindPolygonCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                FindPolygonCompleted(this, new FindPolygonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null) || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Web.Services.WebServiceBinding(Name = "RouteServiceSoap", Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlInclude(typeof (MapPointConstants))]
    [System.Xml.Serialization.XmlInclude(typeof (FindResult[]))]
    public partial class RouteServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private CustomerInfoRouteHeader customerInfoRouteHeaderValueField;

        private UserInfoRouteHeader userInfoRouteHeaderValueField;

        private System.Threading.SendOrPostCallback CalculateSimpleRouteOperationCompleted;

        private System.Threading.SendOrPostCallback CalculateRouteOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public RouteServiceSoap()
        {
            Url = "http://routev3.staging.mappoint.net/Route-30/RouteService.asmx";
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public CustomerInfoRouteHeader CustomerInfoRouteHeaderValue
        {
            get { return customerInfoRouteHeaderValueField; }
            set { customerInfoRouteHeaderValueField = value; }
        }

        public UserInfoRouteHeader UserInfoRouteHeaderValue
        {
            get { return userInfoRouteHeaderValueField; }
            set { userInfoRouteHeaderValueField = value; }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true) && (useDefaultCredentialsSetExplicitly == false)) && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event CalculateSimpleRouteCompletedEventHandler CalculateSimpleRouteCompleted;

        /// <remarks/>
        public event CalculateRouteCompletedEventHandler CalculateRouteCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/CalculateSimpleRoute", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Route CalculateSimpleRoute(LatLong[] latLongs, string dataSourceName, SegmentPreference preference)
        {
            object[] results = Invoke("CalculateSimpleRoute", new object[] {latLongs, dataSourceName, preference});
            return ((Route) (results[0]));
        }

        /// <remarks/>
        public void CalculateSimpleRouteAsync(LatLong[] latLongs, string dataSourceName, SegmentPreference preference)
        {
            CalculateSimpleRouteAsync(latLongs, dataSourceName, preference, null);
        }

        /// <remarks/>
        public void CalculateSimpleRouteAsync(LatLong[] latLongs, string dataSourceName, SegmentPreference preference, object userState)
        {
            if ((CalculateSimpleRouteOperationCompleted == null))
            {
                CalculateSimpleRouteOperationCompleted = new System.Threading.SendOrPostCallback(OnCalculateSimpleRouteOperationCompleted);
            }
            InvokeAsync("CalculateSimpleRoute", new object[] {latLongs, dataSourceName, preference}, CalculateSimpleRouteOperationCompleted, userState);
        }

        private void OnCalculateSimpleRouteOperationCompleted(object arg)
        {
            if ((CalculateSimpleRouteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                CalculateSimpleRouteCompleted(this, new CalculateSimpleRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/CalculateRoute", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Route CalculateRoute(RouteSpecification specification)
        {
            object[] results = Invoke("CalculateRoute", new object[] {specification});
            return ((Route) (results[0]));
        }

        /// <remarks/>
        public void CalculateRouteAsync(RouteSpecification specification)
        {
            CalculateRouteAsync(specification, null);
        }

        /// <remarks/>
        public void CalculateRouteAsync(RouteSpecification specification, object userState)
        {
            if ((CalculateRouteOperationCompleted == null))
            {
                CalculateRouteOperationCompleted = new System.Threading.SendOrPostCallback(OnCalculateRouteOperationCompleted);
            }
            InvokeAsync("CalculateRoute", new object[] {specification}, CalculateRouteOperationCompleted, userState);
        }

        private void OnCalculateRouteOperationCompleted(object arg)
        {
            if ((CalculateRouteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                CalculateRouteCompleted(this, new CalculateRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null) || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Web.Services.WebServiceBinding(Name = "RenderServiceSoap", Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlInclude(typeof (MapPointConstants))]
    [System.Xml.Serialization.XmlInclude(typeof (FindResult[]))]
    public partial class RenderServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        private CustomerInfoRenderHeader customerInfoRenderHeaderValueField;

        private UserInfoRenderHeader userInfoRenderHeaderValueField;

        private System.Threading.SendOrPostCallback GetMapOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertToPointOperationCompleted;

        private System.Threading.SendOrPostCallback ConvertToLatLongOperationCompleted;

        private System.Threading.SendOrPostCallback GetBestMapViewOperationCompleted;

        private System.Threading.SendOrPostCallback GetLineDriveMapOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public RenderServiceSoap()
        {
            Url = "http://renderv3.staging.mappoint.net/Render-30/RenderService.asmx";
            if ((IsLocalFileSystemWebService(Url) == true))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public CustomerInfoRenderHeader CustomerInfoRenderHeaderValue
        {
            get { return customerInfoRenderHeaderValueField; }
            set { customerInfoRenderHeaderValueField = value; }
        }

        public UserInfoRenderHeader UserInfoRenderHeaderValue
        {
            get { return userInfoRenderHeaderValueField; }
            set { userInfoRenderHeaderValueField = value; }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if ((((IsLocalFileSystemWebService(base.Url) == true) && (useDefaultCredentialsSetExplicitly == false)) && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetMapCompletedEventHandler GetMapCompleted;

        /// <remarks/>
        public event ConvertToPointCompletedEventHandler ConvertToPointCompleted;

        /// <remarks/>
        public event ConvertToLatLongCompletedEventHandler ConvertToLatLongCompleted;

        /// <remarks/>
        public event GetBestMapViewCompletedEventHandler GetBestMapViewCompleted;

        /// <remarks/>
        public event GetLineDriveMapCompletedEventHandler GetLineDriveMapCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetMap", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapImage[] GetMap(MapSpecification specification)
        {
            object[] results = Invoke("GetMap", new object[] {specification});
            return ((MapImage[]) (results[0]));
        }

        /// <remarks/>
        public void GetMapAsync(MapSpecification specification)
        {
            GetMapAsync(specification, null);
        }

        /// <remarks/>
        public void GetMapAsync(MapSpecification specification, object userState)
        {
            if ((GetMapOperationCompleted == null))
            {
                GetMapOperationCompleted = new System.Threading.SendOrPostCallback(OnGetMapOperationCompleted);
            }
            InvokeAsync("GetMap", new object[] {specification}, GetMapOperationCompleted, userState);
        }

        private void OnGetMapOperationCompleted(object arg)
        {
            if ((GetMapCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetMapCompleted(this, new GetMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/ConvertToPoint", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PixelCoord[] ConvertToPoint(LatLong[] latLong, MapView view, int width, int height)
        {
            object[] results = Invoke("ConvertToPoint", new object[] {latLong, view, width, height});
            return ((PixelCoord[]) (results[0]));
        }

        /// <remarks/>
        public void ConvertToPointAsync(LatLong[] latLong, MapView view, int width, int height)
        {
            ConvertToPointAsync(latLong, view, width, height, null);
        }

        /// <remarks/>
        public void ConvertToPointAsync(LatLong[] latLong, MapView view, int width, int height, object userState)
        {
            if ((ConvertToPointOperationCompleted == null))
            {
                ConvertToPointOperationCompleted = new System.Threading.SendOrPostCallback(OnConvertToPointOperationCompleted);
            }
            InvokeAsync("ConvertToPoint", new object[] {latLong, view, width, height}, ConvertToPointOperationCompleted, userState);
        }

        private void OnConvertToPointOperationCompleted(object arg)
        {
            if ((ConvertToPointCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                ConvertToPointCompleted(this, new ConvertToPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/ConvertToLatLong", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LatLong[] ConvertToLatLong(PixelCoord[] pixels, MapView view, int width, int height)
        {
            object[] results = Invoke("ConvertToLatLong", new object[] {pixels, view, width, height});
            return ((LatLong[]) (results[0]));
        }

        /// <remarks/>
        public void ConvertToLatLongAsync(PixelCoord[] pixels, MapView view, int width, int height)
        {
            ConvertToLatLongAsync(pixels, view, width, height, null);
        }

        /// <remarks/>
        public void ConvertToLatLongAsync(PixelCoord[] pixels, MapView view, int width, int height, object userState)
        {
            if ((ConvertToLatLongOperationCompleted == null))
            {
                ConvertToLatLongOperationCompleted = new System.Threading.SendOrPostCallback(OnConvertToLatLongOperationCompleted);
            }
            InvokeAsync("ConvertToLatLong", new object[] {pixels, view, width, height}, ConvertToLatLongOperationCompleted, userState);
        }

        private void OnConvertToLatLongOperationCompleted(object arg)
        {
            if ((ConvertToLatLongCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                ConvertToLatLongCompleted(this, new ConvertToLatLongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetBestMapView", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapViewRepresentations GetBestMapView(Location[] locations, string dataSourceName)
        {
            object[] results = Invoke("GetBestMapView", new object[] {locations, dataSourceName});
            return ((MapViewRepresentations) (results[0]));
        }

        /// <remarks/>
        public void GetBestMapViewAsync(Location[] locations, string dataSourceName)
        {
            GetBestMapViewAsync(locations, dataSourceName, null);
        }

        /// <remarks/>
        public void GetBestMapViewAsync(Location[] locations, string dataSourceName, object userState)
        {
            if ((GetBestMapViewOperationCompleted == null))
            {
                GetBestMapViewOperationCompleted = new System.Threading.SendOrPostCallback(OnGetBestMapViewOperationCompleted);
            }
            InvokeAsync("GetBestMapView", new object[] {locations, dataSourceName}, GetBestMapViewOperationCompleted, userState);
        }

        private void OnGetBestMapViewOperationCompleted(object arg)
        {
            if ((GetBestMapViewCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetBestMapViewCompleted(this, new GetBestMapViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeader("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeader("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethod("http://s.mappoint.net/mappoint-30/GetLineDriveMap", RequestNamespace = "http://s.mappoint.net/mappoint-30/", ResponseNamespace = "http://s.mappoint.net/mappoint-30/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LineDriveMapImage[] GetLineDriveMap(LineDriveMapSpecification specification)
        {
            object[] results = Invoke("GetLineDriveMap", new object[] {specification});
            return ((LineDriveMapImage[]) (results[0]));
        }

        /// <remarks/>
        public void GetLineDriveMapAsync(LineDriveMapSpecification specification)
        {
            GetLineDriveMapAsync(specification, null);
        }

        /// <remarks/>
        public void GetLineDriveMapAsync(LineDriveMapSpecification specification, object userState)
        {
            if ((GetLineDriveMapOperationCompleted == null))
            {
                GetLineDriveMapOperationCompleted = new System.Threading.SendOrPostCallback(OnGetLineDriveMapOperationCompleted);
            }
            InvokeAsync("GetLineDriveMap", new object[] {specification}, GetLineDriveMapOperationCompleted, userState);
        }

        private void OnGetLineDriveMapOperationCompleted(object arg)
        {
            if ((GetLineDriveMapCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                GetLineDriveMapCompleted(this, new GetLineDriveMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null) || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class UserInfoRouteHeader : UserInfoHeader
    {
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlInclude(typeof (UserInfoRenderHeader))]
    [System.Xml.Serialization.XmlInclude(typeof (UserInfoRouteHeader))]
    [System.Xml.Serialization.XmlInclude(typeof (UserInfoFindHeader))]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class UserInfoHeader : System.Web.Services.Protocols.SoapHeader
    {
        private CultureInfo cultureField;

        private DistanceUnit defaultDistanceUnitField;

        private CountryRegionContext contextField;

        /// <remarks/>
        public CultureInfo Culture
        {
            get { return cultureField; }
            set { cultureField = value; }
        }

        /// <remarks/>
        public DistanceUnit DefaultDistanceUnit
        {
            get { return defaultDistanceUnitField; }
            set { defaultDistanceUnitField = value; }
        }

        /// <remarks/>
        public CountryRegionContext Context
        {
            get { return contextField; }
            set { contextField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class CultureInfo
    {
        private string nameField;

        private int lcidField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public int Lcid
        {
            get { return lcidField; }
            set { lcidField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LineDriveMapImage
    {
        private MimeData mimeDataField;

        private string urlField;

        private MapViewRepresentations viewField;

        private int firstDirectionIDField;

        private int lastDirectionIDField;

        /// <remarks/>
        public MimeData MimeData
        {
            get { return mimeDataField; }
            set { mimeDataField = value; }
        }

        /// <remarks/>
        public string Url
        {
            get { return urlField; }
            set { urlField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations View
        {
            get { return viewField; }
            set { viewField = value; }
        }

        /// <remarks/>
        public int FirstDirectionID
        {
            get { return firstDirectionIDField; }
            set { firstDirectionIDField = value; }
        }

        /// <remarks/>
        public int LastDirectionID
        {
            get { return lastDirectionIDField; }
            set { lastDirectionIDField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MimeData
    {
        private byte[] bitsField;

        private string contentIDField;

        private string mimeTypeField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElement(DataType = "base64Binary")]
        public byte[] Bits
        {
            get { return bitsField; }
            set { bitsField = value; }
        }

        /// <remarks/>
        public string ContentID
        {
            get { return contentIDField; }
            set { contentIDField = value; }
        }

        /// <remarks/>
        public string MimeType
        {
            get { return mimeTypeField; }
            set { mimeTypeField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MapViewRepresentations
    {
        private ViewByScale byScaleField;

        private ViewByHeightWidth byHeightWidthField;

        private ViewByBoundingRectangle byBoundingRectangleField;

        /// <remarks/>
        public ViewByScale ByScale
        {
            get { return byScaleField; }
            set { byScaleField = value; }
        }

        /// <remarks/>
        public ViewByHeightWidth ByHeightWidth
        {
            get { return byHeightWidthField; }
            set { byHeightWidthField = value; }
        }

        /// <remarks/>
        public ViewByBoundingRectangle ByBoundingRectangle
        {
            get { return byBoundingRectangleField; }
            set { byBoundingRectangleField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ViewByScale : MapView
    {
        private double mapScaleField;

        private LatLong centerPointField;

        public ViewByScale()
        {
            mapScaleField = 0;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public double MapScale
        {
            get { return mapScaleField; }
            set { mapScaleField = value; }
        }

        /// <remarks/>
        public LatLong CenterPoint
        {
            get { return centerPointField; }
            set { centerPointField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LatLong
    {
        private double latitudeField;

        private double longitudeField;

        public LatLong()
        {
            latitudeField = 0;
            longitudeField = 0;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public double Latitude
        {
            get { return latitudeField; }
            set { latitudeField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public double Longitude
        {
            get { return longitudeField; }
            set { longitudeField = value; }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlInclude(typeof (ViewByBoundingRectangle))]
    [System.Xml.Serialization.XmlInclude(typeof (ViewByBoundingLocations))]
    [System.Xml.Serialization.XmlInclude(typeof (ViewByHeightWidth))]
    [System.Xml.Serialization.XmlInclude(typeof (ViewByScale))]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public abstract partial class MapView
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ViewByBoundingRectangle : MapView
    {
        private LatLongRectangle boundingRectangleField;

        /// <remarks/>
        public LatLongRectangle BoundingRectangle
        {
            get { return boundingRectangleField; }
            set { boundingRectangleField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LatLongRectangle
    {
        private LatLong southwestField;

        private LatLong northeastField;

        /// <remarks/>
        public LatLong Southwest
        {
            get { return southwestField; }
            set { southwestField = value; }
        }

        /// <remarks/>
        public LatLong Northeast
        {
            get { return northeastField; }
            set { northeastField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ViewByBoundingLocations : MapView
    {
        private Location[] locationsField;

        /// <remarks/>
        public Location[] Locations
        {
            get { return locationsField; }
            set { locationsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Location
    {
        private LatLong latLongField;

        private Entity entityField;

        private Address addressField;

        private MapViewRepresentations bestMapViewField;

        private string dataSourceNameField;

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }

        /// <remarks/>
        public Entity Entity
        {
            get { return entityField; }
            set { entityField = value; }
        }

        /// <remarks/>
        public Address Address
        {
            get { return addressField; }
            set { addressField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations BestMapView
        {
            get { return bestMapViewField; }
            set { bestMapViewField = value; }
        }

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Entity
    {
        private int idField;

        private string nameField;

        private string displayNameField;

        private string typeNameField;

        private EntityPropertyValue[] propertiesField;

        /// <remarks/>
        public int ID
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }

        /// <remarks/>
        public string TypeName
        {
            get { return typeNameField; }
            set { typeNameField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem("Property")]
        public EntityPropertyValue[] Properties
        {
            get { return propertiesField; }
            set { propertiesField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class EntityPropertyValue
    {
        private string nameField;

        private object valueField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public object Value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Address
    {
        private string addressLineField;

        private string primaryCityField;

        private string secondaryCityField;

        private string subdivisionField;

        private string postalCodeField;

        private string countryRegionField;

        private string formattedAddressField;

        /// <remarks/>
        public string AddressLine
        {
            get { return addressLineField; }
            set { addressLineField = value; }
        }

        /// <remarks/>
        public string PrimaryCity
        {
            get { return primaryCityField; }
            set { primaryCityField = value; }
        }

        /// <remarks/>
        public string SecondaryCity
        {
            get { return secondaryCityField; }
            set { secondaryCityField = value; }
        }

        /// <remarks/>
        public string Subdivision
        {
            get { return subdivisionField; }
            set { subdivisionField = value; }
        }

        /// <remarks/>
        public string PostalCode
        {
            get { return postalCodeField; }
            set { postalCodeField = value; }
        }

        /// <remarks/>
        public string CountryRegion
        {
            get { return countryRegionField; }
            set { countryRegionField = value; }
        }

        /// <remarks/>
        public string FormattedAddress
        {
            get { return formattedAddressField; }
            set { formattedAddressField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ViewByHeightWidth : MapView
    {
        private double heightField;

        private double widthField;

        private LatLong centerPointField;

        public ViewByHeightWidth()
        {
            heightField = 0;
            widthField = 0;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public double Height
        {
            get { return heightField; }
            set { heightField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public double Width
        {
            get { return widthField; }
            set { widthField = value; }
        }

        /// <remarks/>
        public LatLong CenterPoint
        {
            get { return centerPointField; }
            set { centerPointField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LineDriveMapOptions
    {
        private ImageFormat formatField;

        private MapReturnType returnTypeField;

        private MapFontSize fontSizeField;

        private PaletteType paletteTypeField;

        private string destinationIconDataSourceField;

        private string destinationIconNameField;

        public LineDriveMapOptions()
        {
            returnTypeField = MapReturnType.ReturnImage;
            fontSizeField = MapFontSize.Smaller;
        }

        /// <remarks/>
        public ImageFormat Format
        {
            get { return formatField; }
            set { formatField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(MapReturnType.ReturnImage)]
        public MapReturnType ReturnType
        {
            get { return returnTypeField; }
            set { returnTypeField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(MapFontSize.Smaller)]
        public MapFontSize FontSize
        {
            get { return fontSizeField; }
            set { fontSizeField = value; }
        }

        /// <remarks/>
        public PaletteType PaletteType
        {
            get { return paletteTypeField; }
            set { paletteTypeField = value; }
        }

        /// <remarks/>
        public string DestinationIconDataSource
        {
            get { return destinationIconDataSourceField; }
            set { destinationIconDataSourceField = value; }
        }

        /// <remarks/>
        public string DestinationIconName
        {
            get { return destinationIconNameField; }
            set { destinationIconNameField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ImageFormat
    {
        private string mimeTypeField;

        private int heightField;

        private int widthField;

        public ImageFormat()
        {
            mimeTypeField = "image/gif";
            heightField = 240;
            widthField = 296;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue("image/gif")]
        public string MimeType
        {
            get { return mimeTypeField; }
            set { mimeTypeField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(240)]
        public int Height
        {
            get { return heightField; }
            set { heightField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(296)]
        public int Width
        {
            get { return widthField; }
            set { widthField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum MapReturnType
    {
        /// <remarks/>
        ReturnImage,

        /// <remarks/>
        ReturnUrl,

        /// <remarks/>
        ReturnSecureUrl,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum MapFontSize
    {
        /// <remarks/>
        Smallest,

        /// <remarks/>
        Smaller,

        /// <remarks/>
        Medium,

        /// <remarks/>
        Larger,

        /// <remarks/>
        Largest,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum PaletteType
    {
        /// <remarks/>
        Color,

        /// <remarks/>
        GrayScale,

        /// <remarks/>
        Monochrome,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LineDriveMapSpecification
    {
        private Route routeField;

        private LineDriveMapOptions optionsField;

        /// <remarks/>
        public Route Route
        {
            get { return routeField; }
            set { routeField = value; }
        }

        /// <remarks/>
        public LineDriveMapOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Route
    {
        private RouteSpecification specificationField;

        private RouteItinerary itineraryField;

        private CalculatedRouteRepresentation calculatedRepresentationField;

        /// <remarks/>
        public RouteSpecification Specification
        {
            get { return specificationField; }
            set { specificationField = value; }
        }

        /// <remarks/>
        public RouteItinerary Itinerary
        {
            get { return itineraryField; }
            set { itineraryField = value; }
        }

        /// <remarks/>
        public CalculatedRouteRepresentation CalculatedRepresentation
        {
            get { return calculatedRepresentationField; }
            set { calculatedRepresentationField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class RouteSpecification
    {
        private SegmentSpecification[] segmentsField;

        private RouteResultMask resultMaskField;

        private string dataSourceNameField;

        private DriverProfile driverProfileField;

        /// <remarks/>
        public SegmentSpecification[] Segments
        {
            get { return segmentsField; }
            set { segmentsField = value; }
        }

        /// <remarks/>
        public RouteResultMask ResultMask
        {
            get { return resultMaskField; }
            set { resultMaskField = value; }
        }

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public DriverProfile DriverProfile
        {
            get { return driverProfileField; }
            set { driverProfileField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class SegmentSpecification
    {
        private Waypoint waypointField;

        private SegmentOptions optionsField;

        /// <remarks/>
        public Waypoint Waypoint
        {
            get { return waypointField; }
            set { waypointField = value; }
        }

        /// <remarks/>
        public SegmentOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Waypoint
    {
        private Location locationField;

        private SnapType snapField;

        private string nameField;

        private Location calculatedLocationField;

        /// <remarks/>
        public Location Location
        {
            get { return locationField; }
            set { locationField = value; }
        }

        /// <remarks/>
        public SnapType Snap
        {
            get { return snapField; }
            set { snapField = value; }
        }

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public Location CalculatedLocation
        {
            get { return calculatedLocationField; }
            set { calculatedLocationField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum SnapType
    {
        /// <remarks/>
        Normal,

        /// <remarks/>
        City,

        /// <remarks/>
        NearestRoad,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class SegmentOptions
    {
        private SegmentPreference preferenceField;

        private bool calculateSegmentMapViewField;

        private bool calculateDirectionMapViewField;

        public SegmentOptions()
        {
            calculateSegmentMapViewField = true;
            calculateDirectionMapViewField = true;
        }

        /// <remarks/>
        public SegmentPreference Preference
        {
            get { return preferenceField; }
            set { preferenceField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(true)]
        public bool CalculateSegmentMapView
        {
            get { return calculateSegmentMapViewField; }
            set { calculateSegmentMapViewField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(true)]
        public bool CalculateDirectionMapView
        {
            get { return calculateDirectionMapViewField; }
            set { calculateDirectionMapViewField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum SegmentPreference
    {
        /// <remarks/>
        Quickest,

        /// <remarks/>
        Shortest,

        /// <remarks/>
        PreferredRoads,
    }

    /// <remarks/>
    [System.Flags()]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum RouteResultMask
    {
        /// <remarks/>
        Itinerary = 1,

        /// <remarks/>
        CalculatedRouteRepresentation = 2,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class DriverProfile
    {
        private int dayStartTimeField;

        private int dayEndTimeField;

        private PreferredRoadTypes preferredRoadTypesField;

        public DriverProfile()
        {
            dayStartTimeField = -1;
            dayEndTimeField = -1;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(-1)]
        public int DayStartTime
        {
            get { return dayStartTimeField; }
            set { dayStartTimeField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(-1)]
        public int DayEndTime
        {
            get { return dayEndTimeField; }
            set { dayEndTimeField = value; }
        }

        /// <remarks/>
        public PreferredRoadTypes PreferredRoadTypes
        {
            get { return preferredRoadTypesField; }
            set { preferredRoadTypesField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class PreferredRoadTypes
    {
        private double highwaysField;

        private double majorRoadsField;

        private double minorRoadsField;

        private double tollRoadsField;

        private double ferriesField;

        public PreferredRoadTypes()
        {
            highwaysField = 0.5;
            majorRoadsField = 0.5;
            minorRoadsField = 0.5;
            tollRoadsField = 0.5;
            ferriesField = 0.5;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.5)]
        public double Highways
        {
            get { return highwaysField; }
            set { highwaysField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.5)]
        public double MajorRoads
        {
            get { return majorRoadsField; }
            set { majorRoadsField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.5)]
        public double MinorRoads
        {
            get { return minorRoadsField; }
            set { minorRoadsField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.5)]
        public double TollRoads
        {
            get { return tollRoadsField; }
            set { tollRoadsField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.5)]
        public double Ferries
        {
            get { return ferriesField; }
            set { ferriesField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class RouteItinerary
    {
        private Segment[] segmentsField;

        private long tripTimeField;

        private long drivingTimeField;

        private double distanceField;

        private MapViewRepresentations viewField;

        /// <remarks/>
        public Segment[] Segments
        {
            get { return segmentsField; }
            set { segmentsField = value; }
        }

        /// <remarks/>
        public long TripTime
        {
            get { return tripTimeField; }
            set { tripTimeField = value; }
        }

        /// <remarks/>
        public long DrivingTime
        {
            get { return drivingTimeField; }
            set { drivingTimeField = value; }
        }

        /// <remarks/>
        public double Distance
        {
            get { return distanceField; }
            set { distanceField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations View
        {
            get { return viewField; }
            set { viewField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Segment
    {
        private Waypoint waypointField;

        private Direction[] directionsField;

        private long tripTimeField;

        private long drivingTimeField;

        private double distanceField;

        private MapViewRepresentations viewField;

        /// <remarks/>
        public Waypoint Waypoint
        {
            get { return waypointField; }
            set { waypointField = value; }
        }

        /// <remarks/>
        public Direction[] Directions
        {
            get { return directionsField; }
            set { directionsField = value; }
        }

        /// <remarks/>
        public long TripTime
        {
            get { return tripTimeField; }
            set { tripTimeField = value; }
        }

        /// <remarks/>
        public long DrivingTime
        {
            get { return drivingTimeField; }
            set { drivingTimeField = value; }
        }

        /// <remarks/>
        public double Distance
        {
            get { return distanceField; }
            set { distanceField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations View
        {
            get { return viewField; }
            set { viewField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Direction
    {
        private LatLong latLongField;

        private DirectionType directionTypeField;

        private DirectionAction actionField;

        private float bearingOutOfTurnField;

        private float bearingIntoTurnField;

        private long durationField;

        private double distanceField;

        private string towardsField;

        private string instructionField;

        private string formattedInstructionField;

        private int idField;

        private MapViewRepresentations viewField;

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }

        /// <remarks/>
        public DirectionType DirectionType
        {
            get { return directionTypeField; }
            set { directionTypeField = value; }
        }

        /// <remarks/>
        public DirectionAction Action
        {
            get { return actionField; }
            set { actionField = value; }
        }

        /// <remarks/>
        public float BearingOutOfTurn
        {
            get { return bearingOutOfTurnField; }
            set { bearingOutOfTurnField = value; }
        }

        /// <remarks/>
        public float BearingIntoTurn
        {
            get { return bearingIntoTurnField; }
            set { bearingIntoTurnField = value; }
        }

        /// <remarks/>
        public long Duration
        {
            get { return durationField; }
            set { durationField = value; }
        }

        /// <remarks/>
        public double Distance
        {
            get { return distanceField; }
            set { distanceField = value; }
        }

        /// <remarks/>
        public string Towards
        {
            get { return towardsField; }
            set { towardsField = value; }
        }

        /// <remarks/>
        public string Instruction
        {
            get { return instructionField; }
            set { instructionField = value; }
        }

        /// <remarks/>
        public string FormattedInstruction
        {
            get { return formattedInstructionField; }
            set { formattedInstructionField = value; }
        }

        /// <remarks/>
        public int ID
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations View
        {
            get { return viewField; }
            set { viewField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum DirectionType
    {
        /// <remarks/>
        Driving,

        /// <remarks/>
        Border,

        /// <remarks/>
        StartOfDay,

        /// <remarks/>
        EndOfDay,

        /// <remarks/>
        Warning,

        /// <remarks/>
        Waypoint,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum DirectionAction
    {
        /// <remarks/>
        Other,

        /// <remarks/>
        Depart,

        /// <remarks/>
        Arrive,

        /// <remarks/>
        TurnLeft,

        /// <remarks/>
        TurnRight,

        /// <remarks/>
        BearLeft,

        /// <remarks/>
        BearRight,

        /// <remarks/>
        Merge,

        /// <remarks/>
        Continue,

        /// <remarks/>
        TurnBack,

        /// <remarks/>
        TakeRoundabout,

        /// <remarks/>
        ConstructionDelay,

        /// <remarks/>
        ConstructionStop,

        /// <remarks/>
        NameChange,

        /// <remarks/>
        LeftLeft,

        /// <remarks/>
        LeftRight,

        /// <remarks/>
        RightLeft,

        /// <remarks/>
        RightRight,

        /// <remarks/>
        TakeRamp,

        /// <remarks/>
        TakeRampLeft,

        /// <remarks/>
        TakeRampRight,

        /// <remarks/>
        KeepStraight,

        /// <remarks/>
        KeepLeft,

        /// <remarks/>
        KeepRight,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class CalculatedRouteRepresentation
    {
        private byte[] bitsField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElement(DataType = "base64Binary")]
        public byte[] Bits
        {
            get { return bitsField; }
            set { bitsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class PixelRectangle
    {
        private int bottomField;

        private int leftField;

        private int rightField;

        private int topField;

        /// <remarks/>
        public int Bottom
        {
            get { return bottomField; }
            set { bottomField = value; }
        }

        /// <remarks/>
        public int Left
        {
            get { return leftField; }
            set { leftField = value; }
        }

        /// <remarks/>
        public int Right
        {
            get { return rightField; }
            set { rightField = value; }
        }

        /// <remarks/>
        public int Top
        {
            get { return topField; }
            set { topField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class HotArea
    {
        private PixelRectangle iconRectangleField;

        private PixelRectangle labelRectangleField;

        private string pinIDField;

        /// <remarks/>
        public PixelRectangle IconRectangle
        {
            get { return iconRectangleField; }
            set { iconRectangleField = value; }
        }

        /// <remarks/>
        public PixelRectangle LabelRectangle
        {
            get { return labelRectangleField; }
            set { labelRectangleField = value; }
        }

        /// <remarks/>
        public string PinID
        {
            get { return pinIDField; }
            set { pinIDField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MapImage
    {
        private HotArea[] hotAreasField;

        private MimeData mimeDataField;

        private MapViewRepresentations viewField;

        private string urlField;

        /// <remarks/>
        public HotArea[] HotAreas
        {
            get { return hotAreasField; }
            set { hotAreasField = value; }
        }

        /// <remarks/>
        public MimeData MimeData
        {
            get { return mimeDataField; }
            set { mimeDataField = value; }
        }

        /// <remarks/>
        public MapViewRepresentations View
        {
            get { return viewField; }
            set { viewField = value; }
        }

        /// <remarks/>
        public string Url
        {
            get { return urlField; }
            set { urlField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class PixelCoord
    {
        private int xField;

        private int yField;

        /// <remarks/>
        public int X
        {
            get { return xField; }
            set { xField = value; }
        }

        /// <remarks/>
        public int Y
        {
            get { return yField; }
            set { yField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Pushpin
    {
        private string iconDataSourceField;

        private string iconNameField;

        private string labelField;

        private LatLong latLongField;

        private string pinIDField;

        private PixelCoord pixelField;

        private bool returnsHotAreaField;

        private bool labelNearbyRoadsField;

        /// <remarks/>
        public string IconDataSource
        {
            get { return iconDataSourceField; }
            set { iconDataSourceField = value; }
        }

        /// <remarks/>
        public string IconName
        {
            get { return iconNameField; }
            set { iconNameField = value; }
        }

        /// <remarks/>
        public string Label
        {
            get { return labelField; }
            set { labelField = value; }
        }

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }

        /// <remarks/>
        public string PinID
        {
            get { return pinIDField; }
            set { pinIDField = value; }
        }

        /// <remarks/>
        public PixelCoord Pixel
        {
            get { return pixelField; }
            set { pixelField = value; }
        }

        /// <remarks/>
        public bool ReturnsHotArea
        {
            get { return returnsHotAreaField; }
            set { returnsHotAreaField = value; }
        }

        /// <remarks/>
        public bool LabelNearbyRoads
        {
            get { return labelNearbyRoadsField; }
            set { labelNearbyRoadsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MapOptions
    {
        private RouteHighlightColor routeHighlightColorField;

        private RouteHighlightColor constructionDelayHighlightColorField;

        private RouteHighlightColor constructionClosureHighlightColorField;

        private MapFontSize fontSizeField;

        private ImageFormat formatField;

        private bool isOverviewMapField;

        private MapReturnType returnTypeField;

        private double panHorizontalField;

        private double panVerticalField;

        private MapStyle styleField;

        private double zoomField;

        private bool preventIconCollisionsField;

        public MapOptions()
        {
            fontSizeField = MapFontSize.Smaller;
            isOverviewMapField = false;
            returnTypeField = MapReturnType.ReturnImage;
            zoomField = 1;
            preventIconCollisionsField = false;
        }

        /// <remarks/>
        public RouteHighlightColor RouteHighlightColor
        {
            get { return routeHighlightColorField; }
            set { routeHighlightColorField = value; }
        }

        /// <remarks/>
        public RouteHighlightColor ConstructionDelayHighlightColor
        {
            get { return constructionDelayHighlightColorField; }
            set { constructionDelayHighlightColorField = value; }
        }

        /// <remarks/>
        public RouteHighlightColor ConstructionClosureHighlightColor
        {
            get { return constructionClosureHighlightColorField; }
            set { constructionClosureHighlightColorField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(MapFontSize.Smaller)]
        public MapFontSize FontSize
        {
            get { return fontSizeField; }
            set { fontSizeField = value; }
        }

        /// <remarks/>
        public ImageFormat Format
        {
            get { return formatField; }
            set { formatField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(false)]
        public bool IsOverviewMap
        {
            get { return isOverviewMapField; }
            set { isOverviewMapField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(MapReturnType.ReturnImage)]
        public MapReturnType ReturnType
        {
            get { return returnTypeField; }
            set { returnTypeField = value; }
        }

        /// <remarks/>
        public double PanHorizontal
        {
            get { return panHorizontalField; }
            set { panHorizontalField = value; }
        }

        /// <remarks/>
        public double PanVertical
        {
            get { return panVerticalField; }
            set { panVerticalField = value; }
        }

        /// <remarks/>
        public MapStyle Style
        {
            get { return styleField; }
            set { styleField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(1)]
        public double Zoom
        {
            get { return zoomField; }
            set { zoomField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(false)]
        public bool PreventIconCollisions
        {
            get { return preventIconCollisionsField; }
            set { preventIconCollisionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum RouteHighlightColor
    {
        /// <remarks/>
        DefaultColor,

        /// <remarks/>
        Green,

        /// <remarks/>
        Yellow,

        /// <remarks/>
        Cyan,

        /// <remarks/>
        Red,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum MapStyle
    {
        /// <remarks/>
        DefaultStyle,

        /// <remarks/>
        Locator,

        /// <remarks/>
        Terrain,

        /// <remarks/>
        Road,

        /// <remarks/>
        Political,

        /// <remarks/>
        Small,

        /// <remarks/>
        LocatorBW,

        /// <remarks/>
        TerrainBW,

        /// <remarks/>
        RoadBW,

        /// <remarks/>
        PoliticalBW,

        /// <remarks/>
        SmallBW,

        /// <remarks/>
        Comprehensive,

        /// <remarks/>
        PhysicalFeatures,

        /// <remarks/>
        Tectonic,

        /// <remarks/>
        EarthByDay,

        /// <remarks/>
        EarthByNight,

        /// <remarks/>
        Ecoregions,

        /// <remarks/>
        Climate,

        /// <remarks/>
        TemperatureJanuary,

        /// <remarks/>
        TemperatureJuly,

        /// <remarks/>
        PrecipitationJanuary,

        /// <remarks/>
        PrecipitationJuly,

        /// <remarks/>
        PrecipitationAnnual,

        /// <remarks/>
        Languages,

        /// <remarks/>
        Religions,

        /// <remarks/>
        PopulationDensity,

        /// <remarks/>
        Parks,

        /// <remarks/>
        TimeZones,

        /// <remarks/>
        Outline,

        /// <remarks/>
        Phone,

        /// <remarks/>
        PhoneBW,

        /// <remarks/>
        Night,

        /// <remarks/>
        Europe,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class ElementColor
    {
        private byte aField;

        private byte rField;

        private byte gField;

        private byte bField;

        /// <remarks/>
        public byte A
        {
            get { return aField; }
            set { aField = value; }
        }

        /// <remarks/>
        public byte R
        {
            get { return rField; }
            set { rField = value; }
        }

        /// <remarks/>
        public byte G
        {
            get { return gField; }
            set { gField = value; }
        }

        /// <remarks/>
        public byte B
        {
            get { return bField; }
            set { bField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class Polygon
    {
        private string dataSourceNameField;

        private int entityIDField;

        private ElementColor borderColorField;

        private ElementColor fillColorField;

        private string labelField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public int EntityID
        {
            get { return entityIDField; }
            set { entityIDField = value; }
        }

        /// <remarks/>
        public ElementColor BorderColor
        {
            get { return borderColorField; }
            set { borderColorField = value; }
        }

        /// <remarks/>
        public ElementColor FillColor
        {
            get { return fillColorField; }
            set { fillColorField = value; }
        }

        /// <remarks/>
        public string Label
        {
            get { return labelField; }
            set { labelField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MapSpecification
    {
        private Polygon[] polygonsField;

        private string dataSourceNameField;

        private int[] highlightedEntityIDsField;

        private string[] hideEntityTypesField;

        private MapOptions optionsField;

        private Pushpin[] pushpinsField;

        private Route routeField;

        private MapView[] viewsField;

        /// <remarks/>
        public Polygon[] Polygons
        {
            get { return polygonsField; }
            set { polygonsField = value; }
        }

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public int[] HighlightedEntityIDs
        {
            get { return highlightedEntityIDsField; }
            set { highlightedEntityIDsField = value; }
        }

        /// <remarks/>
        public string[] HideEntityTypes
        {
            get { return hideEntityTypesField; }
            set { hideEntityTypesField = value; }
        }

        /// <remarks/>
        public MapOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }

        /// <remarks/>
        public Pushpin[] Pushpins
        {
            get { return pushpinsField; }
            set { pushpinsField = value; }
        }

        /// <remarks/>
        public Route Route
        {
            get { return routeField; }
            set { routeField = value; }
        }

        /// <remarks/>
        public MapView[] Views
        {
            get { return viewsField; }
            set { viewsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindPolygonSpecification
    {
        private string dataSourceNameField;

        private FindFilter filterField;

        private FindOptions optionsField;

        private SpatialFilter spatialFilterField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public FindFilter Filter
        {
            get { return filterField; }
            set { filterField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }

        /// <remarks/>
        public SpatialFilter SpatialFilter
        {
            get { return spatialFilterField; }
            set { spatialFilterField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindFilter
    {
        private string entityTypeNameField;

        private string[] propertyNamesField;

        private WhereClause whereClauseField;

        private SortProperty[] sortPropertiesField;

        private FilterExpression expressionField;

        /// <remarks/>
        public string EntityTypeName
        {
            get { return entityTypeNameField; }
            set { entityTypeNameField = value; }
        }

        /// <remarks/>
        public string[] PropertyNames
        {
            get { return propertyNamesField; }
            set { propertyNamesField = value; }
        }

        /// <remarks/>
        public WhereClause WhereClause
        {
            get { return whereClauseField; }
            set { whereClauseField = value; }
        }

        /// <remarks/>
        public SortProperty[] SortProperties
        {
            get { return sortPropertiesField; }
            set { sortPropertiesField = value; }
        }

        /// <remarks/>
        public FilterExpression Expression
        {
            get { return expressionField; }
            set { expressionField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class WhereClause
    {
        private EntityPropertyValue[] searchPropertiesField;

        private SearchOperatorFlag searchOperatorField;

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem("Property")]
        public EntityPropertyValue[] SearchProperties
        {
            get { return searchPropertiesField; }
            set { searchPropertiesField = value; }
        }

        /// <remarks/>
        public SearchOperatorFlag SearchOperator
        {
            get { return searchOperatorField; }
            set { searchOperatorField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum SearchOperatorFlag
    {
        /// <remarks/>
        And,

        /// <remarks/>
        Or,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class SortProperty
    {
        private string propertyNameField;

        private SortDirection directionField;

        /// <remarks/>
        public string PropertyName
        {
            get { return propertyNameField; }
            set { propertyNameField = value; }
        }

        /// <remarks/>
        public SortDirection Direction
        {
            get { return directionField; }
            set { directionField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum SortDirection
    {
        /// <remarks/>
        Ascending,

        /// <remarks/>
        Descending,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FilterExpression
    {
        private string textField;

        private object[] parametersField;

        /// <remarks/>
        public string Text
        {
            get { return textField; }
            set { textField = value; }
        }

        /// <remarks/>
        public object[] Parameters
        {
            get { return parametersField; }
            set { parametersField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindOptions
    {
        private FindRange rangeField;

        private int searchContextField;

        private FindResultMask resultMaskField;

        private double thresholdScoreField;

        public FindOptions()
        {
            thresholdScoreField = 0.85;
        }

        /// <remarks/>
        public FindRange Range
        {
            get { return rangeField; }
            set { rangeField = value; }
        }

        /// <remarks/>
        public int SearchContext
        {
            get { return searchContextField; }
            set { searchContextField = value; }
        }

        /// <remarks/>
        public FindResultMask ResultMask
        {
            get { return resultMaskField; }
            set { resultMaskField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.85)]
        public double ThresholdScore
        {
            get { return thresholdScoreField; }
            set { thresholdScoreField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindRange
    {
        private int startIndexField;

        private int countField;

        public FindRange()
        {
            startIndexField = 0;
            countField = 25;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public int StartIndex
        {
            get { return startIndexField; }
            set { startIndexField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(25)]
        public int Count
        {
            get { return countField; }
            set { countField = value; }
        }
    }

    /// <remarks/>
    [System.Flags()]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum FindResultMask
    {
        /// <remarks/>
        LatLongFlag = 1,

        /// <remarks/>
        EntityFlag = 2,

        /// <remarks/>
        AddressFlag = 4,

        /// <remarks/>
        BestMapViewFlag = 8,

        /// <remarks/>
        MatchDetailsFlag = 16,

        /// <remarks/>
        RooftopFlag = 32,
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlInclude(typeof (LatLongRectangleSpatialFilter))]
    [System.Xml.Serialization.XmlInclude(typeof (LatLongSpatialFilter))]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public abstract partial class SpatialFilter
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LatLongRectangleSpatialFilter : SpatialFilter
    {
        private LatLongRectangle boundingRectangleField;

        private SpatialRelation polygonRectangleRelationField;

        /// <remarks/>
        public LatLongRectangle BoundingRectangle
        {
            get { return boundingRectangleField; }
            set { boundingRectangleField = value; }
        }

        /// <remarks/>
        public SpatialRelation PolygonRectangleRelation
        {
            get { return polygonRectangleRelationField; }
            set { polygonRectangleRelationField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum SpatialRelation
    {
        /// <remarks/>
        WithinArea,

        /// <remarks/>
        TouchesArea,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class LatLongSpatialFilter : SpatialFilter
    {
        private LatLong latLongField;

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindNearRouteSpecification
    {
        private string dataSourceNameField;

        private double distanceField;

        private FindFilter filterField;

        private FindOptions optionsField;

        private Route routeField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public double Distance
        {
            get { return distanceField; }
            set { distanceField = value; }
        }

        /// <remarks/>
        public FindFilter Filter
        {
            get { return filterField; }
            set { filterField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }

        /// <remarks/>
        public Route Route
        {
            get { return routeField; }
            set { routeField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindByIDSpecification
    {
        private string dataSourceNameField;

        private FindFilter filterField;

        private FindOptions optionsField;

        private int[] entityIDsField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public FindFilter Filter
        {
            get { return filterField; }
            set { filterField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }

        /// <remarks/>
        public int[] EntityIDs
        {
            get { return entityIDsField; }
            set { entityIDsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindByPropertySpecification
    {
        private string dataSourceNameField;

        private FindFilter filterField;

        private FindOptions optionsField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public FindFilter Filter
        {
            get { return filterField; }
            set { filterField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindNearbySpecification
    {
        private string dataSourceNameField;

        private LatLong latLongField;

        private double distanceField;

        private FindFilter filterField;

        private FindOptions optionsField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }

        /// <remarks/>
        public double Distance
        {
            get { return distanceField; }
            set { distanceField = value; }
        }

        /// <remarks/>
        public FindFilter Filter
        {
            get { return filterField; }
            set { filterField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class GetInfoOptions
    {
        private bool includeAddressesField;

        private bool includeAllEntityTypesField;

        private string[] entityTypesToReturnField;

        public GetInfoOptions()
        {
            includeAddressesField = true;
            includeAllEntityTypesField = true;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(true)]
        public bool IncludeAddresses
        {
            get { return includeAddressesField; }
            set { includeAddressesField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(true)]
        public bool IncludeAllEntityTypes
        {
            get { return includeAllEntityTypesField; }
            set { includeAllEntityTypesField = value; }
        }

        /// <remarks/>
        public string[] EntityTypesToReturn
        {
            get { return entityTypesToReturnField; }
            set { entityTypesToReturnField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindAddressSpecification
    {
        private string dataSourceNameField;

        private Address inputAddressField;

        private FindOptions optionsField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public Address InputAddress
        {
            get { return inputAddressField; }
            set { inputAddressField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class MapPointConstants
    {
        private double earthRadiusInKilometersField;

        private double piField;

        private double radiansPerDegreeField;

        private double degreesPerRadianField;

        private double milesPerKilometerField;

        private double kilometersPerMileField;

        private double kilometersPerFootField;

        private double feetPerKilometerField;

        private double findScoreThresholdField;

        private int assumedDpiField;

        private double feetPerMeterField;

        private double metersPerFootField;

        public MapPointConstants()
        {
            earthRadiusInKilometersField = 6378.2;
            piField = 3.1415926535897931;
            radiansPerDegreeField = 0.017453292519943295;
            degreesPerRadianField = 57.295779513082323;
            milesPerKilometerField = 0.621371192237334;
            kilometersPerMileField = 1.609344;
            kilometersPerFootField = 0.0003048;
            feetPerKilometerField = 3280.8398950131232;
            findScoreThresholdField = 0.85;
            assumedDpiField = 96;
            feetPerMeterField = 3.280839895013123;
            metersPerFootField = 0.3048;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(6378.2)]
        public double EarthRadiusInKilometers
        {
            get { return earthRadiusInKilometersField; }
            set { earthRadiusInKilometersField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(3.1415926535897931)]
        public double Pi
        {
            get { return piField; }
            set { piField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.017453292519943295)]
        public double RadiansPerDegree
        {
            get { return radiansPerDegreeField; }
            set { radiansPerDegreeField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(57.295779513082323)]
        public double DegreesPerRadian
        {
            get { return degreesPerRadianField; }
            set { degreesPerRadianField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.621371192237334)]
        public double MilesPerKilometer
        {
            get { return milesPerKilometerField; }
            set { milesPerKilometerField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(1.609344)]
        public double KilometersPerMile
        {
            get { return kilometersPerMileField; }
            set { kilometersPerMileField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.0003048)]
        public double KilometersPerFoot
        {
            get { return kilometersPerFootField; }
            set { kilometersPerFootField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(3280.8398950131232)]
        public double FeetPerKilometer
        {
            get { return feetPerKilometerField; }
            set { feetPerKilometerField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.85)]
        public double FindScoreThreshold
        {
            get { return findScoreThresholdField; }
            set { findScoreThresholdField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(96)]
        public int AssumedDpi
        {
            get { return assumedDpiField; }
            set { assumedDpiField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(3.280839895013123)]
        public double FeetPerMeter
        {
            get { return feetPerMeterField; }
            set { feetPerMeterField = value; }
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0.3048)]
        public double MetersPerFoot
        {
            get { return metersPerFootField; }
            set { metersPerFootField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindResult
    {
        private double scoreField;

        private Location foundLocationField;

        private Location bestViewableLocationField;

        /// <remarks/>
        public double Score
        {
            get { return scoreField; }
            set { scoreField = value; }
        }

        /// <remarks/>
        public Location FoundLocation
        {
            get { return foundLocationField; }
            set { foundLocationField = value; }
        }

        /// <remarks/>
        public Location BestViewableLocation
        {
            get { return bestViewableLocationField; }
            set { bestViewableLocationField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindResults
    {
        private int numberFoundField;

        private int startIndexField;

        private FindResult[] resultsField;

        private double topScoreField;

        /// <remarks/>
        public int NumberFound
        {
            get { return numberFoundField; }
            set { numberFoundField = value; }
        }

        /// <remarks/>
        public int StartIndex
        {
            get { return startIndexField; }
            set { startIndexField = value; }
        }

        /// <remarks/>
        public FindResult[] Results
        {
            get { return resultsField; }
            set { resultsField = value; }
        }

        /// <remarks/>
        public double TopScore
        {
            get { return topScoreField; }
            set { topScoreField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class FindSpecification
    {
        private string dataSourceNameField;

        private string inputPlaceField;

        private string[] entityTypeNamesField;

        private FindOptions optionsField;

        /// <remarks/>
        public string DataSourceName
        {
            get { return dataSourceNameField; }
            set { dataSourceNameField = value; }
        }

        /// <remarks/>
        public string InputPlace
        {
            get { return inputPlaceField; }
            set { inputPlaceField = value; }
        }

        /// <remarks/>
        public string[] EntityTypeNames
        {
            get { return entityTypeNamesField; }
            set { entityTypeNamesField = value; }
        }

        /// <remarks/>
        public FindOptions Options
        {
            get { return optionsField; }
            set { optionsField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class TokenSpecification
    {
        private string clientIPAddressField;

        private int tokenValidityDurationMinutesField;

        /// <remarks/>
        public string ClientIPAddress
        {
            get { return clientIPAddressField; }
            set { clientIPAddressField = value; }
        }

        /// <remarks/>
        public int TokenValidityDurationMinutes
        {
            get { return tokenValidityDurationMinutesField; }
            set { tokenValidityDurationMinutesField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class DataSource
    {
        private string nameField;

        private string versionField;

        private string descriptionField;

        private DataSourceCapability capabilityField;

        private int[] entityExtentField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string Version
        {
            get { return versionField; }
            set { versionField = value; }
        }

        /// <remarks/>
        public string Description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public DataSourceCapability Capability
        {
            get { return capabilityField; }
            set { capabilityField = value; }
        }

        /// <remarks/>
        public int[] EntityExtent
        {
            get { return entityExtentField; }
            set { entityExtentField = value; }
        }
    }

    /// <remarks/>
    [System.Flags()]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum DataSourceCapability
    {
        /// <remarks/>
        CanDrawMaps = 1,

        /// <remarks/>
        CanFindPlaces = 2,

        /// <remarks/>
        CanFindNearby = 4,

        /// <remarks/>
        CanRoute = 8,

        /// <remarks/>
        CanFindAddress = 16,

        /// <remarks/>
        HasIcons = 32,

        /// <remarks/>
        DataServiceQuery = 64,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class EntityProperty
    {
        private string nameField;

        private string displayNameField;

        private string dataTypeField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }

        /// <remarks/>
        public string DataType
        {
            get { return dataTypeField; }
            set { dataTypeField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class EntityType
    {
        private string nameField;

        private string displayNameField;

        private string parentNameField;

        private string definitionField;

        private EntityProperty[] propertiesField;

        /// <remarks/>
        public string Name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        public string DisplayName
        {
            get { return displayNameField; }
            set { displayNameField = value; }
        }

        /// <remarks/>
        public string ParentName
        {
            get { return parentNameField; }
            set { parentNameField = value; }
        }

        /// <remarks/>
        public string Definition
        {
            get { return definitionField; }
            set { definitionField = value; }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem("Property")]
        public EntityProperty[] Properties
        {
            get { return propertiesField; }
            set { propertiesField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class CountryRegionInfo
    {
        private int entityIDField;

        private LatLong latLongField;

        private string iso2Field;

        private string iso3Field;

        private string friendlyNameField;

        private string officialNameField;

        /// <remarks/>
        public int EntityID
        {
            get { return entityIDField; }
            set { entityIDField = value; }
        }

        /// <remarks/>
        public LatLong LatLong
        {
            get { return latLongField; }
            set { latLongField = value; }
        }

        /// <remarks/>
        public string Iso2
        {
            get { return iso2Field; }
            set { iso2Field = value; }
        }

        /// <remarks/>
        public string Iso3
        {
            get { return iso3Field; }
            set { iso3Field = value; }
        }

        /// <remarks/>
        public string FriendlyName
        {
            get { return friendlyNameField; }
            set { friendlyNameField = value; }
        }

        /// <remarks/>
        public string OfficialName
        {
            get { return officialNameField; }
            set { officialNameField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class VersionInfo
    {
        private string componentField;

        private string versionField;

        /// <remarks/>
        public string Component
        {
            get { return componentField; }
            set { componentField = value; }
        }

        /// <remarks/>
        public string Version
        {
            get { return versionField; }
            set { versionField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public partial class CountryRegionContext
    {
        private int entityIDField;

        private string iso2Field;

        public CountryRegionContext()
        {
            entityIDField = 0;
        }

        /// <remarks/>
        [System.ComponentModel.DefaultValue(0)]
        public int EntityID
        {
            get { return entityIDField; }
            set { entityIDField = value; }
        }

        /// <remarks/>
        public string Iso2
        {
            get { return iso2Field; }
            set { iso2Field = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    public enum DistanceUnit
    {
        /// <remarks/>
        Kilometer,

        /// <remarks/>
        Mile,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class UserInfoRenderHeader : UserInfoHeader
    {
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlInclude(typeof (CustomerInfoRenderHeader))]
    [System.Xml.Serialization.XmlInclude(typeof (CustomerInfoRouteHeader))]
    [System.Xml.Serialization.XmlInclude(typeof (CustomerInfoFindHeader))]
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class CustomerInfoHeader : System.Web.Services.Protocols.SoapHeader
    {
        private short customLogEntryField;

        /// <remarks/>
        public short CustomLogEntry
        {
            get { return customLogEntryField; }
            set { customLogEntryField = value; }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class CustomerInfoRouteHeader : CustomerInfoHeader
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class UserInfoFindHeader : UserInfoHeader
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class CustomerInfoRenderHeader : CustomerInfoHeader
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Xml", "2.0.50727.1434")]
    [System.Serializable()]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.Xml.Serialization.XmlType(Namespace = "http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRoot(Namespace = "http://s.mappoint.net/mappoint-30/", IsNullable = false)]
    public partial class CustomerInfoFindHeader : CustomerInfoHeader
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetVersionInfoCompletedEventHandler(object sender, GetVersionInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetVersionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetVersionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public VersionInfo[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((VersionInfo[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetCountryRegionInfoCompletedEventHandler(object sender, GetCountryRegionInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetCountryRegionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetCountryRegionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public CountryRegionInfo[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((CountryRegionInfo[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetEntityTypesCompletedEventHandler(object sender, GetEntityTypesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetEntityTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetEntityTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public EntityType[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((EntityType[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetDataSourceInfoCompletedEventHandler(object sender, GetDataSourceInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetDataSourceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetDataSourceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DataSource[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((DataSource[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetGreatCircleDistancesCompletedEventHandler(object sender, GetGreatCircleDistancesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetGreatCircleDistancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetGreatCircleDistancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public double[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((double[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetClientTokenCompletedEventHandler(object sender, GetClientTokenCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetClientTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetClientTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindCompletedEventHandler(object sender, FindCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindAddressCompletedEventHandler(object sender, FindAddressCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void ParseAddressCompletedEventHandler(object sender, ParseAddressCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ParseAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal ParseAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Address Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Address) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetLocationInfoCompletedEventHandler(object sender, GetLocationInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetLocationInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetLocationInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Location[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Location[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindNearbyCompletedEventHandler(object sender, FindNearbyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindNearbyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindNearbyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindByPropertyCompletedEventHandler(object sender, FindByPropertyCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindByPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindByPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindByIDCompletedEventHandler(object sender, FindByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindNearRouteCompletedEventHandler(object sender, FindNearRouteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindNearRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindNearRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void FindPolygonCompletedEventHandler(object sender, FindPolygonCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class FindPolygonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindPolygonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FindResults Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FindResults) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void CalculateSimpleRouteCompletedEventHandler(object sender, CalculateSimpleRouteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class CalculateSimpleRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal CalculateSimpleRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Route Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Route) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void CalculateRouteCompletedEventHandler(object sender, CalculateRouteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class CalculateRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal CalculateRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Route Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((Route) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetMapCompletedEventHandler(object sender, GetMapCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public MapImage[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((MapImage[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void ConvertToPointCompletedEventHandler(object sender, ConvertToPointCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ConvertToPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal ConvertToPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public PixelCoord[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((PixelCoord[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void ConvertToLatLongCompletedEventHandler(object sender, ConvertToLatLongCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class ConvertToLatLongCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal ConvertToLatLongCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LatLong[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LatLong[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetBestMapViewCompletedEventHandler(object sender, GetBestMapViewCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetBestMapViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetBestMapViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public MapViewRepresentations Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((MapViewRepresentations) (results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    public delegate void GetLineDriveMapCompletedEventHandler(object sender, GetLineDriveMapCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCode("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.DesignerCategory("code")]
    public partial class GetLineDriveMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetLineDriveMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LineDriveMapImage[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LineDriveMapImage[]) (results[0]));
            }
        }
    }
}

#pragma warning restore 1591