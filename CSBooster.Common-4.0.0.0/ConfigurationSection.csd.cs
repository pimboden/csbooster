//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The CustomizationSection Configuration Section.
    /// </summary>
    public partial class CustomizationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the CustomizationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CustomizationSectionSectionName = "customizationSection";
        
        /// <summary>
        /// Gets the CustomizationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.CustomizationSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.CustomizationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.CustomizationSection.CustomizationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.CustomizationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CustomizationBar Property
        /// <summary>
        /// The XML name of the <see cref="CustomizationBar"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CustomizationBarPropertyName = "customizationBar";
        
        /// <summary>
        /// Gets or sets the CustomizationBar.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CustomizationBar.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.CustomizationBarPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.CustomizationTabElementCollection CustomizationBar
        {
            get
            {
                return ((global::_4screen.CSB.Common.CustomizationTabElementCollection)(base[global::_4screen.CSB.Common.CustomizationSection.CustomizationBarPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.CustomizationBarPropertyName] = value;
            }
        }
        #endregion
        
        #region Profile Property
        /// <summary>
        /// The XML name of the <see cref="Profile"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ProfilePropertyName = "profile";
        
        /// <summary>
        /// Gets or sets the Profile.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Profile.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.ProfilePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.ProfileSettingsElementCollection Profile
        {
            get
            {
                return ((global::_4screen.CSB.Common.ProfileSettingsElementCollection)(base[global::_4screen.CSB.Common.CustomizationSection.ProfilePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.ProfilePropertyName] = value;
            }
        }
        #endregion
        
        #region Modules Property
        /// <summary>
        /// The XML name of the <see cref="Modules"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ModulesPropertyName = "modules";
        
        /// <summary>
        /// Gets or sets the Modules.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Modules.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.ModulesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.ModuleElementCollection Modules
        {
            get
            {
                return ((global::_4screen.CSB.Common.ModuleElementCollection)(base[global::_4screen.CSB.Common.CustomizationSection.ModulesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.ModulesPropertyName] = value;
            }
        }
        #endregion
        
        #region Logins Property
        /// <summary>
        /// The XML name of the <see cref="Logins"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LoginsPropertyName = "logins";
        
        /// <summary>
        /// Gets or sets the Logins.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Logins.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.LoginsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.LoginElementCollection Logins
        {
            get
            {
                return ((global::_4screen.CSB.Common.LoginElementCollection)(base[global::_4screen.CSB.Common.CustomizationSection.LoginsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.LoginsPropertyName] = value;
            }
        }
        #endregion
        
        #region MyContent Property
        /// <summary>
        /// The XML name of the <see cref="MyContent"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MyContentPropertyName = "myContent";
        
        /// <summary>
        /// Gets or sets the MyContent.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MyContent.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.MyContentPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MyContentElement MyContent
        {
            get
            {
                return ((global::_4screen.CSB.Common.MyContentElement)(base[global::_4screen.CSB.Common.CustomizationSection.MyContentPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.MyContentPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultLayouts Property
        /// <summary>
        /// The XML name of the <see cref="DefaultLayouts"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DefaultLayoutsPropertyName = "defaultLayouts";
        
        /// <summary>
        /// Gets or sets the DefaultLayouts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultLayouts.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.DefaultLayoutsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.DefaultLayouts DefaultLayouts
        {
            get
            {
                return ((global::_4screen.CSB.Common.DefaultLayouts)(base[global::_4screen.CSB.Common.CustomizationSection.DefaultLayoutsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.DefaultLayoutsPropertyName] = value;
            }
        }
        #endregion
        
        #region Common Property
        /// <summary>
        /// The XML name of the <see cref="Common"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CommonPropertyName = "common";
        
        /// <summary>
        /// Gets or sets the Common.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Common.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.CommonPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.CommonCustomizationElement Common
        {
            get
            {
                return ((global::_4screen.CSB.Common.CommonCustomizationElement)(base[global::_4screen.CSB.Common.CustomizationSection.CommonPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.CommonPropertyName] = value;
            }
        }
        #endregion
        
        #region ContentReports Property
        /// <summary>
        /// The XML name of the <see cref="ContentReports"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ContentReportsPropertyName = "contentReports";
        
        /// <summary>
        /// Gets or sets the ContentReports.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ContentReports.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationSection.ContentReportsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.ContentReports ContentReports
        {
            get
            {
                return ((global::_4screen.CSB.Common.ContentReports)(base[global::_4screen.CSB.Common.CustomizationSection.ContentReportsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationSection.ContentReportsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of CustomizationTabElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.CustomizationTabElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::_4screen.CSB.Common.CustomizationTabElementCollection.CustomizationTabElementPropertyName)]
    public partial class CustomizationTabElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CustomizationTabElementPropertyName = "customizationTab";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.CustomizationTabElementCollection.CustomizationTabElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.CustomizationTabElementCollection.CustomizationTabElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.CustomizationTabElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.CustomizationTabElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.CustomizationTabElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.CustomizationTabElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.CustomizationTabElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.CustomizationTabElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="customizationTab">The <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.CustomizationTabElement customizationTab)
        {
            base.BaseAdd(customizationTab);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="customizationTab">The <see cref="global::_4screen.CSB.Common.CustomizationTabElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.CustomizationTabElement customizationTab)
        {
            base.BaseRemove(this.GetElementKey(customizationTab));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationTabElementCollection.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool Enabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.CustomizationTabElementCollection.EnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationTabElementCollection.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region PageAddEnabled Property
        /// <summary>
        /// The XML name of the <see cref="PageAddEnabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string PageAddEnabledPropertyName = "pageAddEnabled";
        
        /// <summary>
        /// Gets or sets the PageAddEnabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PageAddEnabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationTabElementCollection.PageAddEnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public bool PageAddEnabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.CustomizationTabElementCollection.PageAddEnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationTabElementCollection.PageAddEnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region PageUpdateEnabled Property
        /// <summary>
        /// The XML name of the <see cref="PageUpdateEnabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string PageUpdateEnabledPropertyName = "pageUpdateEnabled";
        
        /// <summary>
        /// Gets or sets the PageUpdateEnabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PageUpdateEnabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationTabElementCollection.PageUpdateEnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public bool PageUpdateEnabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.CustomizationTabElementCollection.PageUpdateEnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationTabElementCollection.PageUpdateEnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The CustomizationTabElement Configuration Element.
    /// </summary>
    public partial class CustomizationTabElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationTabElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.CustomizationTabElement.IdPropertyName]));
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CustomizationTabElement.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool Enabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.CustomizationTabElement.EnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CustomizationTabElement.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of ProfileSettingsElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.ProfileSettingsElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::_4screen.CSB.Common.ProfileSettingsElementCollection.ProfileSettingsElementPropertyName)]
    public partial class ProfileSettingsElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ProfileSettingsElementPropertyName = "profileSettings";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.ProfileSettingsElementCollection.ProfileSettingsElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.ProfileSettingsElementCollection.ProfileSettingsElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.ProfileSettingsElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.ProfileSettingsElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ProfileSettingsElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ProfileSettingsElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ProfileSettingsElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ProfileSettingsElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profileSettings">The <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.ProfileSettingsElement profileSettings)
        {
            base.BaseAdd(profileSettings);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="profileSettings">The <see cref="global::_4screen.CSB.Common.ProfileSettingsElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.ProfileSettingsElement profileSettings)
        {
            base.BaseRemove(this.GetElementKey(profileSettings));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ProfileSettingsElement Configuration Element.
    /// </summary>
    public partial class ProfileSettingsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ProfileSettingsElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ProfileSettingsElement.IdPropertyName]));
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ProfileSettingsElement.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool Enabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.ProfileSettingsElement.EnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ProfileSettingsElement.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of ModuleElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.ModuleElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::_4screen.CSB.Common.ModuleElementCollection.ModuleElementPropertyName)]
    public partial class ModuleElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.ModuleElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ModuleElementPropertyName = "module";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.ModuleElementCollection.ModuleElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.ModuleElementCollection.ModuleElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.ModuleElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.ModuleElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.ModuleElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.ModuleElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ModuleElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.ModuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ModuleElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ModuleElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ModuleElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.ModuleElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ModuleElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ModuleElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.ModuleElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="module">The <see cref="global::_4screen.CSB.Common.ModuleElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.ModuleElement module)
        {
            base.BaseAdd(module);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.ModuleElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="module">The <see cref="global::_4screen.CSB.Common.ModuleElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.ModuleElement module)
        {
            base.BaseRemove(this.GetElementKey(module));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ModuleElement Configuration Element.
    /// </summary>
    public partial class ModuleElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ModuleElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ModuleElement.IdPropertyName]));
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ModuleElement.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool Enabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.ModuleElement.EnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ModuleElement.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of LoginElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.LoginElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::_4screen.CSB.Common.LoginElementCollection.LoginElementPropertyName)]
    public partial class LoginElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.LoginElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LoginElementPropertyName = "login";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.LoginElementCollection.LoginElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.LoginElementCollection.LoginElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.LoginElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.LoginElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.LoginElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.LoginElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.LoginElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.LoginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.LoginElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.LoginElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.LoginElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.LoginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.LoginElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.LoginElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.LoginElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="login">The <see cref="global::_4screen.CSB.Common.LoginElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.LoginElement login)
        {
            base.BaseAdd(login);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.LoginElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="login">The <see cref="global::_4screen.CSB.Common.LoginElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.LoginElement login)
        {
            base.BaseRemove(this.GetElementKey(login));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The LoginElement Configuration Element.
    /// </summary>
    public partial class LoginElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.LoginElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.LoginElement.IdPropertyName]));
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.LoginElement.EnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool Enabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.LoginElement.EnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.LoginElement.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WidgetSection Configuration Section.
    /// </summary>
    public partial class WidgetSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the WidgetSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WidgetSectionSectionName = "widgetSection";
        
        /// <summary>
        /// Gets the WidgetSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.WidgetSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.WidgetSection.WidgetSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Widgets Property
        /// <summary>
        /// The XML name of the <see cref="Widgets"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WidgetsPropertyName = "widgets";
        
        /// <summary>
        /// Gets or sets the Widgets.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Widgets.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetSection.WidgetsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WidgetElementCollection Widgets
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetElementCollection)(base[global::_4screen.CSB.Common.WidgetSection.WidgetsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetSection.WidgetsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of WidgetElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.WidgetElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.WidgetElementCollection.WidgetElementPropertyName)]
    public partial class WidgetElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.WidgetElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WidgetElementPropertyName = "widget";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.WidgetElementCollection.WidgetElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.WidgetElementCollection.WidgetElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.WidgetElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.WidgetElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.WidgetElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.WidgetElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WidgetElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WidgetElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WidgetElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WidgetElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.WidgetElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WidgetElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.WidgetElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="widget">The <see cref="global::_4screen.CSB.Common.WidgetElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.WidgetElement widget)
        {
            base.BaseAdd(widget);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.WidgetElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="widget">The <see cref="global::_4screen.CSB.Common.WidgetElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.WidgetElement widget)
        {
            base.BaseRemove(this.GetElementKey(widget));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WidgetElement Configuration Element.
    /// </summary>
    public partial class WidgetElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public global::System.Guid Id
        {
            get
            {
                return ((global::System.Guid)(base[global::_4screen.CSB.Common.WidgetElement.IdPropertyName]));
            }
        }
        #endregion
        
        #region Control Property
        /// <summary>
        /// The XML name of the <see cref="Control"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ControlPropertyName = "control";
        
        /// <summary>
        /// Gets or sets the Control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Control.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.ControlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Control
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.ControlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.ControlPropertyName] = value;
            }
        }
        #endregion
        
        #region TitleKey Property
        /// <summary>
        /// The XML name of the <see cref="TitleKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitleKeyPropertyName = "titleKey";
        
        /// <summary>
        /// Gets or sets the TitleKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TitleKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.TitleKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string TitleKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.TitleKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.TitleKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region DescriptionKey Property
        /// <summary>
        /// The XML name of the <see cref="DescriptionKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DescriptionKeyPropertyName = "descriptionKey";
        
        /// <summary>
        /// Gets or sets the DescriptionKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DescriptionKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.DescriptionKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string DescriptionKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.DescriptionKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.DescriptionKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region GroupId Property
        /// <summary>
        /// The XML name of the <see cref="GroupId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string GroupIdPropertyName = "groupId";
        
        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The GroupId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.GroupIdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public int GroupId
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.WidgetElement.GroupIdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.GroupIdPropertyName] = value;
            }
        }
        #endregion
        
        #region OrderKey Property
        /// <summary>
        /// The XML name of the <see cref="OrderKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string OrderKeyPropertyName = "orderKey";
        
        /// <summary>
        /// Gets or sets the OrderKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The OrderKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.OrderKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public int OrderKey
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.WidgetElement.OrderKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.OrderKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Roles Property
        /// <summary>
        /// The XML name of the <see cref="Roles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string RolesPropertyName = "roles";
        
        /// <summary>
        /// Gets or sets the Roles.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Roles.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.RolesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Roles
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.RolesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.RolesPropertyName] = value;
            }
        }
        #endregion
        
        #region Communities Property
        /// <summary>
        /// The XML name of the <see cref="Communities"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CommunitiesPropertyName = "communities";
        
        /// <summary>
        /// Gets or sets the Communities.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Communities.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.CommunitiesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Communities
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.CommunitiesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.CommunitiesPropertyName] = value;
            }
        }
        #endregion
        
        #region PageTypes Property
        /// <summary>
        /// The XML name of the <see cref="PageTypes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string PageTypesPropertyName = "pageTypes";
        
        /// <summary>
        /// Gets or sets the PageTypes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PageTypes.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.PageTypesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string PageTypes
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.PageTypesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.PageTypesPropertyName] = value;
            }
        }
        #endregion
        
        #region Version Property
        /// <summary>
        /// The XML name of the <see cref="Version"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string VersionPropertyName = "version";
        
        /// <summary>
        /// Gets or sets the Version.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Version.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.VersionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public int Version
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.WidgetElement.VersionPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.VersionPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalizationBaseFileName Property
        /// <summary>
        /// The XML name of the <see cref="LocalizationBaseFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LocalizationBaseFileNamePropertyName = "localizationBaseFileName";
        
        /// <summary>
        /// Gets or sets the LocalizationBaseFileName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalizationBaseFileName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.LocalizationBaseFileNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LocalizationBaseFileName
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.LocalizationBaseFileNamePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.LocalizationBaseFileNamePropertyName] = value;
            }
        }
        #endregion
        
        #region OutputTemplates Property
        /// <summary>
        /// The XML name of the <see cref="OutputTemplates"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string OutputTemplatesPropertyName = "outputTemplates";
        
        /// <summary>
        /// Gets or sets the OutputTemplates.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The OutputTemplates.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.OutputTemplatesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string OutputTemplates
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetElement.OutputTemplatesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.OutputTemplatesPropertyName] = value;
            }
        }
        #endregion
        
        #region ShowAfterInsert Property
        /// <summary>
        /// The XML name of the <see cref="ShowAfterInsert"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShowAfterInsertPropertyName = "showAfterInsert";
        
        /// <summary>
        /// Gets or sets the ShowAfterInsert.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ShowAfterInsert.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.ShowAfterInsertPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WidgetShowAfterInsert ShowAfterInsert
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetShowAfterInsert)(base[global::_4screen.CSB.Common.WidgetElement.ShowAfterInsertPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.ShowAfterInsertPropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.SettingsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WidgetSettingsElement Settings
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetSettingsElement)(base[global::_4screen.CSB.Common.WidgetElement.SettingsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.SettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region Steps Property
        /// <summary>
        /// The XML name of the <see cref="Steps"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string StepsPropertyName = "steps";
        
        /// <summary>
        /// Gets or sets the Steps.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Steps.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetElement.StepsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WidgetStepElementCollection Steps
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetStepElementCollection)(base[global::_4screen.CSB.Common.WidgetElement.StepsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetElement.StepsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WidgetSettingsElement Configuration Element.
    /// </summary>
    public partial class WidgetSettingsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetSettingsElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Value
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetSettingsElement.ValuePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetSettingsElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of WidgetStepElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.WidgetStepElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::_4screen.CSB.Common.WidgetStepElementCollection.WidgetStepElementPropertyName)]
    public partial class WidgetStepElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WidgetStepElementPropertyName = "step";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.WidgetStepElementCollection.WidgetStepElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.WidgetStepElementCollection.WidgetStepElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.WidgetStepElement)(element)).TitleKey;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.WidgetStepElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.WidgetStepElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.WidgetStepElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WidgetStepElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetStepElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> with the specified key.
        /// </summary>
        /// <param name="titleKey">The key of the <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WidgetStepElement this[object titleKey]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WidgetStepElement)(base.BaseGet(titleKey)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="step">The <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.WidgetStepElement step)
        {
            base.BaseAdd(step);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="step">The <see cref="global::_4screen.CSB.Common.WidgetStepElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.WidgetStepElement step)
        {
            base.BaseRemove(this.GetElementKey(step));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WidgetStepElement Configuration Element.
    /// </summary>
    public partial class WidgetStepElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TitleKey Property
        /// <summary>
        /// The XML name of the <see cref="TitleKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitleKeyPropertyName = "titleKey";
        
        /// <summary>
        /// Gets or sets the TitleKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TitleKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetStepElement.TitleKeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string TitleKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetStepElement.TitleKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetStepElement.TitleKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Control Property
        /// <summary>
        /// The XML name of the <see cref="Control"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ControlPropertyName = "control";
        
        /// <summary>
        /// Gets or sets the Control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Control.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WidgetStepElement.ControlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Control
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WidgetStepElement.ControlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WidgetStepElement.ControlPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The MyContentElement Configuration Element.
    /// </summary>
    public partial class MyContentElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region FeaturedEditEnabled Property
        /// <summary>
        /// The XML name of the <see cref="FeaturedEditEnabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string FeaturedEditEnabledPropertyName = "featuredEditEnabled";
        
        /// <summary>
        /// Gets or sets the FeaturedEditEnabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FeaturedEditEnabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MyContentElement.FeaturedEditEnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool FeaturedEditEnabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.MyContentElement.FeaturedEditEnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MyContentElement.FeaturedEditEnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region DeleteEvent Property
        /// <summary>
        /// The XML name of the <see cref="DeleteEvent"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DeleteEventPropertyName = "deleteEvent";
        
        /// <summary>
        /// Gets or sets the DeleteEvent.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DeleteEvent.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MyContentElement.DeleteEventPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.DeleteEvents DeleteEvent
        {
            get
            {
                return ((global::_4screen.CSB.Common.DeleteEvents)(base[global::_4screen.CSB.Common.MyContentElement.DeleteEventPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MyContentElement.DeleteEventPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultSortOrder Property
        /// <summary>
        /// The XML name of the <see cref="DefaultSortOrder"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DefaultSortOrderPropertyName = "defaultSortOrder";
        
        /// <summary>
        /// Gets or sets the DefaultSortOrder.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultSortOrder.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MyContentElement.DefaultSortOrderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.QuickSort DefaultSortOrder
        {
            get
            {
                return ((global::_4screen.CSB.Common.QuickSort)(base[global::_4screen.CSB.Common.MyContentElement.DefaultSortOrderPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MyContentElement.DefaultSortOrderPropertyName] = value;
            }
        }
        #endregion
        
        #region AdminCommunitySelectionEnabled Property
        /// <summary>
        /// The XML name of the <see cref="AdminCommunitySelectionEnabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AdminCommunitySelectionEnabledPropertyName = "adminCommunitySelectionEnabled";
        
        /// <summary>
        /// Gets or sets the AdminCommunitySelectionEnabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AdminCommunitySelectionEnabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MyContentElement.AdminCommunitySelectionEnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool AdminCommunitySelectionEnabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.MyContentElement.AdminCommunitySelectionEnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MyContentElement.AdminCommunitySelectionEnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The DefaultLayouts Configuration Element.
    /// </summary>
    public partial class DefaultLayouts : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ProfileCommunity Property
        /// <summary>
        /// The XML name of the <see cref="ProfileCommunity"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ProfileCommunityPropertyName = "profileCommunity";
        
        /// <summary>
        /// Gets or sets the ProfileCommunity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ProfileCommunity.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.DefaultLayouts.ProfileCommunityPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ProfileCommunity
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.DefaultLayouts.ProfileCommunityPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.DefaultLayouts.ProfileCommunityPropertyName] = value;
            }
        }
        #endregion
        
        #region Community Property
        /// <summary>
        /// The XML name of the <see cref="Community"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CommunityPropertyName = "community";
        
        /// <summary>
        /// Gets or sets the Community.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Community.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.DefaultLayouts.CommunityPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Community
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.DefaultLayouts.CommunityPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.DefaultLayouts.CommunityPropertyName] = value;
            }
        }
        #endregion
        
        #region Page Property
        /// <summary>
        /// The XML name of the <see cref="Page"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string PagePropertyName = "page";
        
        /// <summary>
        /// Gets or sets the Page.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Page.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.DefaultLayouts.PagePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Page
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.DefaultLayouts.PagePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.DefaultLayouts.PagePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SecuritySection Configuration Section.
    /// </summary>
    public partial class SecuritySection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SecuritySection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SecuritySectionSectionName = "securitySection";
        
        /// <summary>
        /// Gets the SecuritySection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.SecuritySection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.SecuritySection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.SecuritySection.SecuritySectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SecuritySection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SecuritySection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SecurityAreas Property
        /// <summary>
        /// The XML name of the <see cref="SecurityAreas"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SecurityAreasPropertyName = "securityAreas";
        
        /// <summary>
        /// Gets or sets the SecurityAreas.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SecurityAreas.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SecuritySection.SecurityAreasPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.SecurityAreaElementCollection SecurityAreas
        {
            get
            {
                return ((global::_4screen.CSB.Common.SecurityAreaElementCollection)(base[global::_4screen.CSB.Common.SecuritySection.SecurityAreasPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SecuritySection.SecurityAreasPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of SecurityAreaElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.SecurityAreaElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.SecurityAreaElementCollection.SecurityAreaElementPropertyName)]
    public partial class SecurityAreaElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SecurityAreaElementPropertyName = "securityArea";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.SecurityAreaElementCollection.SecurityAreaElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.SecurityAreaElementCollection.SecurityAreaElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.SecurityAreaElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.SecurityAreaElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SecurityAreaElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SecurityAreaElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SecurityAreaElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SecurityAreaElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="securityArea">The <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.SecurityAreaElement securityArea)
        {
            base.BaseAdd(securityArea);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="securityArea">The <see cref="global::_4screen.CSB.Common.SecurityAreaElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.SecurityAreaElement securityArea)
        {
            base.BaseRemove(this.GetElementKey(securityArea));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SecurityAreaElement Configuration Element.
    /// </summary>
    public partial class SecurityAreaElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SecurityAreaElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SecurityAreaElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SecurityAreaElement.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region Roles Property
        /// <summary>
        /// The XML name of the <see cref="Roles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string RolesPropertyName = "roles";
        
        /// <summary>
        /// Gets or sets the Roles.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Roles.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SecurityAreaElement.RolesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Roles
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SecurityAreaElement.RolesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SecurityAreaElement.RolesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SiteObjectSection Configuration Section.
    /// </summary>
    public partial class SiteObjectSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SiteObjectSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteObjectSectionSectionName = "siteObjectSection";
        
        /// <summary>
        /// Gets the SiteObjectSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.SiteObjectSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteObjectSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.SiteObjectSection.SiteObjectSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SiteObjects Property
        /// <summary>
        /// The XML name of the <see cref="SiteObjects"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteObjectsPropertyName = "siteObjects";
        
        /// <summary>
        /// Gets or sets the SiteObjects.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteObjects.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectSection.SiteObjectsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.SiteObjectElementCollection SiteObjects
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteObjectElementCollection)(base[global::_4screen.CSB.Common.SiteObjectSection.SiteObjectsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectSection.SiteObjectsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of SiteObjectType instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.SiteObjectType), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.SiteObjectElementCollection.SiteObjectTypePropertyName)]
    public partial class SiteObjectElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.SiteObjectType"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteObjectTypePropertyName = "siteObjectType";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.SiteObjectElementCollection.SiteObjectTypePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.SiteObjectElementCollection.SiteObjectTypePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.SiteObjectType)(element)).NumericId;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.SiteObjectType"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.SiteObjectType"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.SiteObjectType();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SiteObjectType"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.SiteObjectType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SiteObjectType this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteObjectType)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SiteObjectType"/> with the specified key.
        /// </summary>
        /// <param name="numericId">The key of the <see cref="global::_4screen.CSB.Common.SiteObjectType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SiteObjectType this[object numericId]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteObjectType)(base.BaseGet(numericId)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.SiteObjectType"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteObjectType">The <see cref="global::_4screen.CSB.Common.SiteObjectType"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.SiteObjectType siteObjectType)
        {
            base.BaseAdd(siteObjectType);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.SiteObjectType"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteObjectType">The <see cref="global::_4screen.CSB.Common.SiteObjectType"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.SiteObjectType siteObjectType)
        {
            base.BaseRemove(this.GetElementKey(siteObjectType));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SiteObjectType Configuration Element.
    /// </summary>
    public partial class SiteObjectType : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.IdPropertyName]));
            }
        }
        #endregion
        
        #region IsActive Property
        /// <summary>
        /// The XML name of the <see cref="IsActive"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IsActivePropertyName = "isActive";
        
        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsActive.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IsActivePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public bool IsActive
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.IsActivePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IsActivePropertyName] = value;
            }
        }
        #endregion
        
        #region AllowedRoles Property
        /// <summary>
        /// The XML name of the <see cref="AllowedRoles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AllowedRolesPropertyName = "allowedRoles";
        
        /// <summary>
        /// Gets or sets the AllowedRoles.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowedRoles.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.AllowedRolesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string AllowedRoles
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.AllowedRolesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.AllowedRolesPropertyName] = value;
            }
        }
        #endregion
        
        #region HasOverview Property
        /// <summary>
        /// The XML name of the <see cref="HasOverview"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string HasOverviewPropertyName = "hasOverview";
        
        /// <summary>
        /// Gets or sets the HasOverview.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The HasOverview.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.HasOverviewPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public bool HasOverview
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.HasOverviewPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.HasOverviewPropertyName] = value;
            }
        }
        #endregion
        
        #region IsFolderContent Property
        /// <summary>
        /// The XML name of the <see cref="IsFolderContent"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IsFolderContentPropertyName = "isFolderContent";
        
        /// <summary>
        /// Gets or sets the IsFolderContent.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsFolderContent.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IsFolderContentPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool IsFolderContent
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.IsFolderContentPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IsFolderContentPropertyName] = value;
            }
        }
        #endregion
        
        #region IsGeoTaggable Property
        /// <summary>
        /// The XML name of the <see cref="IsGeoTaggable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IsGeoTaggablePropertyName = "isGeoTaggable";
        
        /// <summary>
        /// Gets or sets the IsGeoTaggable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsGeoTaggable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IsGeoTaggablePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public bool IsGeoTaggable
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.IsGeoTaggablePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IsGeoTaggablePropertyName] = value;
            }
        }
        #endregion
        
        #region IsMultiUpload Property
        /// <summary>
        /// The XML name of the <see cref="IsMultiUpload"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IsMultiUploadPropertyName = "isMultiUpload";
        
        /// <summary>
        /// Gets or sets the IsMultiUpload.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsMultiUpload.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IsMultiUploadPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public bool IsMultiUpload
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.IsMultiUploadPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IsMultiUploadPropertyName] = value;
            }
        }
        #endregion
        
        #region ImageActionSmall Property
        /// <summary>
        /// The XML name of the <see cref="ImageActionSmall"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImageActionSmallPropertyName = "imageActionSmall";
        
        /// <summary>
        /// Gets or sets the ImageActionSmall.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ImageActionSmall.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ImageActionSmallPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ImageActionSmall
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ImageActionSmallPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ImageActionSmallPropertyName] = value;
            }
        }
        #endregion
        
        #region ImageActionExtraSmall Property
        /// <summary>
        /// The XML name of the <see cref="ImageActionExtraSmall"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImageActionExtraSmallPropertyName = "imageActionExtraSmall";
        
        /// <summary>
        /// Gets or sets the ImageActionExtraSmall.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ImageActionExtraSmall.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ImageActionExtraSmallPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ImageActionExtraSmall
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ImageActionExtraSmallPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ImageActionExtraSmallPropertyName] = value;
            }
        }
        #endregion
        
        #region NameSingularKey Property
        /// <summary>
        /// The XML name of the <see cref="NameSingularKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NameSingularKeyPropertyName = "nameSingularKey";
        
        /// <summary>
        /// Gets or sets the NameSingularKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NameSingularKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NameSingularKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string NameSingularKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NameSingularKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NameSingularKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region NamePluralKey Property
        /// <summary>
        /// The XML name of the <see cref="NamePluralKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NamePluralKeyPropertyName = "namePluralKey";
        
        /// <summary>
        /// Gets or sets the NamePluralKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NamePluralKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NamePluralKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string NamePluralKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NamePluralKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NamePluralKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region NameCreateMenuKey Property
        /// <summary>
        /// The XML name of the <see cref="NameCreateMenuKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NameCreateMenuKeyPropertyName = "nameCreateMenuKey";
        
        /// <summary>
        /// Gets or sets the NameCreateMenuKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NameCreateMenuKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NameCreateMenuKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string NameCreateMenuKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NameCreateMenuKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NameCreateMenuKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region AllowedFileExtensions Property
        /// <summary>
        /// The XML name of the <see cref="AllowedFileExtensions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AllowedFileExtensionsPropertyName = "allowedFileExtensions";
        
        /// <summary>
        /// Gets or sets the AllowedFileExtensions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowedFileExtensions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.AllowedFileExtensionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string AllowedFileExtensions
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.AllowedFileExtensionsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.AllowedFileExtensionsPropertyName] = value;
            }
        }
        #endregion
        
        #region Icon Property
        /// <summary>
        /// The XML name of the <see cref="Icon"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IconPropertyName = "icon";
        
        /// <summary>
        /// Gets or sets the Icon.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Icon.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IconPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Icon
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.IconPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IconPropertyName] = value;
            }
        }
        #endregion
        
        #region UploadWizard Property
        /// <summary>
        /// The XML name of the <see cref="UploadWizard"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UploadWizardPropertyName = "uploadWizard";
        
        /// <summary>
        /// Gets or sets the UploadWizard.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UploadWizard.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.UploadWizardPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string UploadWizard
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.UploadWizardPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.UploadWizardPropertyName] = value;
            }
        }
        #endregion
        
        #region EditWizard Property
        /// <summary>
        /// The XML name of the <see cref="EditWizard"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string EditWizardPropertyName = "editWizard";
        
        /// <summary>
        /// Gets or sets the EditWizard.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EditWizard.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.EditWizardPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string EditWizard
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.EditWizardPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.EditWizardPropertyName] = value;
            }
        }
        #endregion
        
        #region NumericId Property
        /// <summary>
        /// The XML name of the <see cref="NumericId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NumericIdPropertyName = "numericId";
        
        /// <summary>
        /// Gets the NumericId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NumericId.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NumericIdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public int NumericId
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.SiteObjectType.NumericIdPropertyName]));
            }
        }
        #endregion
        
        #region NiceLinkToOverviewKey Property
        /// <summary>
        /// The XML name of the <see cref="NiceLinkToOverviewKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NiceLinkToOverviewKeyPropertyName = "niceLinkToOverviewKey";
        
        /// <summary>
        /// Gets or sets the NiceLinkToOverviewKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NiceLinkToOverviewKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NiceLinkToOverviewKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string NiceLinkToOverviewKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToOverviewKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToOverviewKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region MediaFolder Property
        /// <summary>
        /// The XML name of the <see cref="MediaFolder"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MediaFolderPropertyName = "mediaFolder";
        
        /// <summary>
        /// Gets or sets the MediaFolder.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MediaFolder.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.MediaFolderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string MediaFolder
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.MediaFolderPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.MediaFolderPropertyName] = value;
            }
        }
        #endregion
        
        #region NiceLinkToDetailKey Property
        /// <summary>
        /// The XML name of the <see cref="NiceLinkToDetailKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NiceLinkToDetailKeyPropertyName = "niceLinkToDetailKey";
        
        /// <summary>
        /// Gets or sets the NiceLinkToDetailKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NiceLinkToDetailKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NiceLinkToDetailKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string NiceLinkToDetailKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToDetailKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToDetailKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultImageURL Property
        /// <summary>
        /// The XML name of the <see cref="DefaultImageURL"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DefaultImageURLPropertyName = "defaultImageURL";
        
        /// <summary>
        /// Gets or sets the DefaultImageURL.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultImageURL.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.DefaultImageURLPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string DefaultImageURL
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.DefaultImageURLPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.DefaultImageURLPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalizationBaseFileName Property
        /// <summary>
        /// The XML name of the <see cref="LocalizationBaseFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LocalizationBaseFileNamePropertyName = "localizationBaseFileName";
        
        /// <summary>
        /// Gets or sets root of the Resource
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Root of the Resource")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.LocalizationBaseFileNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LocalizationBaseFileName
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.LocalizationBaseFileNamePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.LocalizationBaseFileNamePropertyName] = value;
            }
        }
        #endregion
        
        #region IsSearchable Property
        /// <summary>
        /// The XML name of the <see cref="IsSearchable"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IsSearchablePropertyName = "isSearchable";
        
        /// <summary>
        /// Gets or sets the IsSearchable.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IsSearchable.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.IsSearchablePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool IsSearchable
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteObjectType.IsSearchablePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.IsSearchablePropertyName] = value;
            }
        }
        #endregion
        
        #region CropCheckAndArchive Property
        /// <summary>
        /// The XML name of the <see cref="CropCheckAndArchive"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string CropCheckAndArchivePropertyName = "cropCheckAndArchive";
        
        /// <summary>
        /// Gets or sets the CropCheckAndArchive.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CropCheckAndArchive.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.CropCheckAndArchivePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string CropCheckAndArchive
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.CropCheckAndArchivePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.CropCheckAndArchivePropertyName] = value;
            }
        }
        #endregion
        
        #region ImageActionLarge Property
        /// <summary>
        /// The XML name of the <see cref="ImageActionLarge"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImageActionLargePropertyName = "imageActionLarge";
        
        /// <summary>
        /// Gets or sets the ImageActionLarge.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ImageActionLarge.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ImageActionLargePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ImageActionLarge
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ImageActionLargePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ImageActionLargePropertyName] = value;
            }
        }
        #endregion
        
        #region ImageActionCrop Property
        /// <summary>
        /// The XML name of the <see cref="ImageActionCrop"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImageActionCropPropertyName = "imageActionCrop";
        
        /// <summary>
        /// Gets or sets the ImageActionCrop.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ImageActionCrop.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ImageActionCropPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ImageActionCrop
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ImageActionCropPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ImageActionCropPropertyName] = value;
            }
        }
        #endregion
        
        #region SearchResultCtrl Property
        /// <summary>
        /// The XML name of the <see cref="SearchResultCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SearchResultCtrlPropertyName = "searchResultCtrl";
        
        /// <summary>
        /// Gets or sets the SearchResultCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SearchResultCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.SearchResultCtrlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string SearchResultCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.SearchResultCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.SearchResultCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region Assembly Property
        /// <summary>
        /// The XML name of the <see cref="Assembly"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AssemblyPropertyName = "assembly";
        
        /// <summary>
        /// Gets or sets the Assembly.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Assembly.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.AssemblyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Assembly
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.AssemblyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.AssemblyPropertyName] = value;
            }
        }
        #endregion
        
        #region SearchForSelectCtrl Property
        /// <summary>
        /// The XML name of the <see cref="SearchForSelectCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SearchForSelectCtrlPropertyName = "searchForSelectCtrl";
        
        /// <summary>
        /// Gets or sets the SearchForSelectCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SearchForSelectCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.SearchForSelectCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string SearchForSelectCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.SearchForSelectCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.SearchForSelectCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultLoadAmount Property
        /// <summary>
        /// The XML name of the <see cref="DefaultLoadAmount"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DefaultLoadAmountPropertyName = "defaultLoadAmount";
        
        /// <summary>
        /// Gets or sets the DefaultLoadAmount.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultLoadAmount.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.DefaultLoadAmountPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=500)]
        public int DefaultLoadAmount
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.SiteObjectType.DefaultLoadAmountPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.DefaultLoadAmountPropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Type
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.TypePropertyName]));
            }
        }
        #endregion
        
        #region UploadMaxFileSize Property
        /// <summary>
        /// The XML name of the <see cref="UploadMaxFileSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UploadMaxFileSizePropertyName = "uploadMaxFileSize";
        
        /// <summary>
        /// Gets or sets the UploadMaxFileSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UploadMaxFileSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=-1)]
        public int UploadMaxFileSize
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizePropertyName] = value;
            }
        }
        #endregion
        
        #region UploadMaxFileCount Property
        /// <summary>
        /// The XML name of the <see cref="UploadMaxFileCount"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UploadMaxFileCountPropertyName = "uploadMaxFileCount";
        
        /// <summary>
        /// Gets or sets the UploadMaxFileCount.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UploadMaxFileCount.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileCountPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=-1)]
        public int UploadMaxFileCount
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileCountPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileCountPropertyName] = value;
            }
        }
        #endregion
        
        #region UploadMaxFileSizeTotal Property
        /// <summary>
        /// The XML name of the <see cref="UploadMaxFileSizeTotal"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UploadMaxFileSizeTotalPropertyName = "uploadMaxFileSizeTotal";
        
        /// <summary>
        /// Gets or sets the UploadMaxFileSizeTotal.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UploadMaxFileSizeTotal.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizeTotalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=-1)]
        public int UploadMaxFileSizeTotal
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizeTotalPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.UploadMaxFileSizeTotalPropertyName] = value;
            }
        }
        #endregion
        
        #region TagHandlerCtrl Property
        /// <summary>
        /// The XML name of the <see cref="TagHandlerCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TagHandlerCtrlPropertyName = "tagHandlerCtrl";
        
        /// <summary>
        /// Gets or sets the TagHandlerCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TagHandlerCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.TagHandlerCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string TagHandlerCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.TagHandlerCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.TagHandlerCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region DetailWidgetId Property
        /// <summary>
        /// The XML name of the <see cref="DetailWidgetId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string DetailWidgetIdPropertyName = "detailWidgetId";
        
        /// <summary>
        /// Gets or sets the DetailWidgetId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DetailWidgetId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.DetailWidgetIdPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::System.Guid DetailWidgetId
        {
            get
            {
                return ((global::System.Guid)(base[global::_4screen.CSB.Common.SiteObjectType.DetailWidgetIdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.DetailWidgetIdPropertyName] = value;
            }
        }
        #endregion
        
        #region ViewHandlerCtrl Property
        /// <summary>
        /// The XML name of the <see cref="ViewHandlerCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ViewHandlerCtrlPropertyName = "viewHandlerCtrl";
        
        /// <summary>
        /// Gets or sets the ViewHandlerCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ViewHandlerCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ViewHandlerCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string ViewHandlerCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ViewHandlerCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ViewHandlerCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region LinkToDetailKey Property
        /// <summary>
        /// The XML name of the <see cref="LinkToDetailKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LinkToDetailKeyPropertyName = "linkToDetailKey";
        
        /// <summary>
        /// Gets or sets the LinkToDetailKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LinkToDetailKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.LinkToDetailKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LinkToDetailKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.LinkToDetailKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.LinkToDetailKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region LinkToOverviewKey Property
        /// <summary>
        /// The XML name of the <see cref="LinkToOverviewKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LinkToOverviewKeyPropertyName = "linkToOverviewKey";
        
        /// <summary>
        /// Gets or sets the LinkToOverviewKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LinkToOverviewKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.LinkToOverviewKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LinkToOverviewKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.LinkToOverviewKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.LinkToOverviewKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region LinkToWizardKey Property
        /// <summary>
        /// The XML name of the <see cref="LinkToWizardKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LinkToWizardKeyPropertyName = "linkToWizardKey";
        
        /// <summary>
        /// Gets or sets the LinkToWizardKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LinkToWizardKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.LinkToWizardKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LinkToWizardKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.LinkToWizardKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.LinkToWizardKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region MapIcon Property
        /// <summary>
        /// The XML name of the <see cref="MapIcon"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapIconPropertyName = "mapIcon";
        
        /// <summary>
        /// Gets or sets the MapIcon.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MapIcon.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.MapIconPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string MapIcon
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.MapIconPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.MapIconPropertyName] = value;
            }
        }
        #endregion
        
        #region ImageActionMedium Property
        /// <summary>
        /// The XML name of the <see cref="ImageActionMedium"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImageActionMediumPropertyName = "imageActionMedium";
        
        /// <summary>
        /// Gets or sets the ImageActionMedium.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ImageActionMedium.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.ImageActionMediumPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string ImageActionMedium
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.ImageActionMediumPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.ImageActionMediumPropertyName] = value;
            }
        }
        #endregion
        
        #region MobileDetailsCtrl Property
        /// <summary>
        /// The XML name of the <see cref="MobileDetailsCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MobileDetailsCtrlPropertyName = "mobileDetailsCtrl";
        
        /// <summary>
        /// Gets or sets the MobileDetailsCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MobileDetailsCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.MobileDetailsCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string MobileDetailsCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.MobileDetailsCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.MobileDetailsCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region NiceLinkToMobileDetailKey Property
        /// <summary>
        /// The XML name of the <see cref="NiceLinkToMobileDetailKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NiceLinkToMobileDetailKeyPropertyName = "niceLinkToMobileDetailKey";
        
        /// <summary>
        /// Gets or sets the NiceLinkToMobileDetailKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NiceLinkToMobileDetailKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileDetailKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string NiceLinkToMobileDetailKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileDetailKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileDetailKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region NiceLinkToMobileOverviewKey Property
        /// <summary>
        /// The XML name of the <see cref="NiceLinkToMobileOverviewKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NiceLinkToMobileOverviewKeyPropertyName = "niceLinkToMobileOverviewKey";
        
        /// <summary>
        /// Gets or sets the NiceLinkToMobileOverviewKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NiceLinkToMobileOverviewKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileOverviewKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string NiceLinkToMobileOverviewKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileOverviewKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.NiceLinkToMobileOverviewKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region MobileOverviewCtrl Property
        /// <summary>
        /// The XML name of the <see cref="MobileOverviewCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MobileOverviewCtrlPropertyName = "mobileOverviewCtrl";
        
        /// <summary>
        /// Gets or sets the MobileOverviewCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MobileOverviewCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.MobileOverviewCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string MobileOverviewCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.MobileOverviewCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.MobileOverviewCtrlPropertyName] = value;
            }
        }
        #endregion
        
        #region MobileSmallOutputCtrl Property
        /// <summary>
        /// The XML name of the <see cref="MobileSmallOutputCtrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MobileSmallOutputCtrlPropertyName = "mobileSmallOutputCtrl";
        
        /// <summary>
        /// Gets or sets the MobileSmallOutputCtrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MobileSmallOutputCtrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteObjectType.MobileSmallOutputCtrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string MobileSmallOutputCtrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteObjectType.MobileSmallOutputCtrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteObjectType.MobileSmallOutputCtrlPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SiteLinkSection Configuration Section.
    /// </summary>
    public partial class SiteLinkSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SiteLinkSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteLinkSectionSectionName = "siteLinkSection";
        
        /// <summary>
        /// Gets the SiteLinkSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.SiteLinkSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteLinkSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.SiteLinkSection.SiteLinkSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLinkSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteLinkSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SiteLinks Property
        /// <summary>
        /// The XML name of the <see cref="SiteLinks"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteLinksPropertyName = "siteLinks";
        
        /// <summary>
        /// Gets or sets the SiteLinks.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteLinks.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLinkSection.SiteLinksPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.SiteLinkElementCollection SiteLinks
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteLinkElementCollection)(base[global::_4screen.CSB.Common.SiteLinkSection.SiteLinksPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLinkSection.SiteLinksPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of SiteLink instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.SiteLink), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.SiteLinkElementCollection.SiteLinkPropertyName)]
    public partial class SiteLinkElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.SiteLink"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SiteLinkPropertyName = "siteLink";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.SiteLinkElementCollection.SiteLinkPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.SiteLinkElementCollection.SiteLinkPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.SiteLink)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.SiteLink"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.SiteLink"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.SiteLink();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SiteLink"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.SiteLink"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SiteLink this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteLink)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.SiteLink"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::_4screen.CSB.Common.SiteLink"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.SiteLink this[object key]
        {
            get
            {
                return ((global::_4screen.CSB.Common.SiteLink)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.SiteLink"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteLink">The <see cref="global::_4screen.CSB.Common.SiteLink"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.SiteLink siteLink)
        {
            base.BaseAdd(siteLink);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.SiteLink"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteLink">The <see cref="global::_4screen.CSB.Common.SiteLink"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.SiteLink siteLink)
        {
            base.BaseRemove(this.GetElementKey(siteLink));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The SiteLink Configuration Element.
    /// </summary>
    public partial class SiteLink : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLink.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Key
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteLink.KeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLink.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLink.UrlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Url
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteLink.UrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLink.UrlPropertyName] = value;
            }
        }
        #endregion
        
        #region PredefinedNaviLink Property
        /// <summary>
        /// The XML name of the <see cref="PredefinedNaviLink"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string PredefinedNaviLinkPropertyName = "predefinedNaviLink";
        
        /// <summary>
        /// Gets or sets the PredefinedNaviLink.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PredefinedNaviLink.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLink.PredefinedNaviLinkPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool PredefinedNaviLink
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.SiteLink.PredefinedNaviLinkPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLink.PredefinedNaviLinkPropertyName] = value;
            }
        }
        #endregion
        
        #region UrlTextKey Property
        /// <summary>
        /// The XML name of the <see cref="UrlTextKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string UrlTextKeyPropertyName = "urlTextKey";
        
        /// <summary>
        /// Gets or sets the UrlTextKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UrlTextKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLink.UrlTextKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string UrlTextKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteLink.UrlTextKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLink.UrlTextKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalizationBaseFileName Property
        /// <summary>
        /// The XML name of the <see cref="LocalizationBaseFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LocalizationBaseFileNamePropertyName = "localizationBaseFileName";
        
        /// <summary>
        /// Gets or sets root of the Resource
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Root of the Resource")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.SiteLink.LocalizationBaseFileNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LocalizationBaseFileName
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.SiteLink.LocalizationBaseFileNamePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.SiteLink.LocalizationBaseFileNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WizardSection Configuration Section.
    /// </summary>
    public partial class WizardSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the WizardSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WizardSectionSectionName = "wizardSection";
        
        /// <summary>
        /// Gets the WizardSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.WizardSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.WizardSection.WizardSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Wizards Property
        /// <summary>
        /// The XML name of the <see cref="Wizards"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WizardsPropertyName = "wizards";
        
        /// <summary>
        /// Gets or sets the Wizards.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Wizards.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardSection.WizardsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WizardElementCollection Wizards
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardElementCollection)(base[global::_4screen.CSB.Common.WizardSection.WizardsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardSection.WizardsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of WizardElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.WizardElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.WizardElementCollection.WizardElementPropertyName)]
    public partial class WizardElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.WizardElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WizardElementPropertyName = "wizard";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.WizardElementCollection.WizardElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.WizardElementCollection.WizardElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.WizardElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.WizardElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.WizardElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.WizardElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WizardElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.WizardElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.WizardElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="wizard">The <see cref="global::_4screen.CSB.Common.WizardElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.WizardElement wizard)
        {
            base.BaseAdd(wizard);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.WizardElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="wizard">The <see cref="global::_4screen.CSB.Common.WizardElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.WizardElement wizard)
        {
            base.BaseRemove(this.GetElementKey(wizard));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WizardElement Configuration Element.
    /// </summary>
    public partial class WizardElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region AccessMode Property
        /// <summary>
        /// The XML name of the <see cref="AccessMode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AccessModePropertyName = "accessMode";
        
        /// <summary>
        /// Gets or sets the AccessMode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessMode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.AccessModePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.AccessMode AccessMode
        {
            get
            {
                return ((global::_4screen.CSB.Common.AccessMode)(base[global::_4screen.CSB.Common.WizardElement.AccessModePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.AccessModePropertyName] = value;
            }
        }
        #endregion
        
        #region ObjectType Property
        /// <summary>
        /// The XML name of the <see cref="ObjectType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ObjectTypePropertyName = "objectType";
        
        /// <summary>
        /// Gets or sets the ObjectType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ObjectType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.ObjectTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ObjectType
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardElement.ObjectTypePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.ObjectTypePropertyName] = value;
            }
        }
        #endregion
        
        #region ResourceKey Property
        /// <summary>
        /// The XML name of the <see cref="ResourceKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ResourceKeyPropertyName = "resourceKey";
        
        /// <summary>
        /// Gets or sets the ResourceKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ResourceKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.ResourceKeyPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string ResourceKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardElement.ResourceKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.ResourceKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalizationBaseFileName Property
        /// <summary>
        /// The XML name of the <see cref="LocalizationBaseFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LocalizationBaseFileNamePropertyName = "localizationBaseFileName";
        
        /// <summary>
        /// Gets or sets the LocalizationBaseFileName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalizationBaseFileName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.LocalizationBaseFileNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string LocalizationBaseFileName
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardElement.LocalizationBaseFileNamePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.LocalizationBaseFileNamePropertyName] = value;
            }
        }
        #endregion
        
        #region NeedsAuthentication Property
        /// <summary>
        /// The XML name of the <see cref="NeedsAuthentication"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string NeedsAuthenticationPropertyName = "needsAuthentication";
        
        /// <summary>
        /// Gets or sets the NeedsAuthentication.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The NeedsAuthentication.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.NeedsAuthenticationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool NeedsAuthentication
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.WizardElement.NeedsAuthenticationPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.NeedsAuthenticationPropertyName] = value;
            }
        }
        #endregion
        
        #region Steps Property
        /// <summary>
        /// The XML name of the <see cref="Steps"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string StepsPropertyName = "steps";
        
        /// <summary>
        /// Gets or sets the Steps.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Steps.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardElement.StepsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WizardStepElementCollection Steps
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepElementCollection)(base[global::_4screen.CSB.Common.WizardElement.StepsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardElement.StepsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of WizardStepElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.WizardStepElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.WizardStepElementCollection.WizardStepElementPropertyName)]
    public partial class WizardStepElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.WizardStepElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WizardStepElementPropertyName = "step";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.WizardStepElementCollection.WizardStepElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.WizardStepElementCollection.WizardStepElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.WizardStepElement)(element)).ResourceKey;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.WizardStepElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.WizardStepElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.WizardStepElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WizardStepElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepElement"/> with the specified key.
        /// </summary>
        /// <param name="resourceKey">The key of the <see cref="global::_4screen.CSB.Common.WizardStepElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepElement this[object resourceKey]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepElement)(base.BaseGet(resourceKey)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.WizardStepElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="step">The <see cref="global::_4screen.CSB.Common.WizardStepElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.WizardStepElement step)
        {
            base.BaseAdd(step);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.WizardStepElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="step">The <see cref="global::_4screen.CSB.Common.WizardStepElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.WizardStepElement step)
        {
            base.BaseRemove(this.GetElementKey(step));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WizardStepElement Configuration Element.
    /// </summary>
    public partial class WizardStepElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ResourceKey Property
        /// <summary>
        /// The XML name of the <see cref="ResourceKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ResourceKeyPropertyName = "resourceKey";
        
        /// <summary>
        /// Gets or sets the ResourceKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ResourceKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.ResourceKeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string ResourceKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardStepElement.ResourceKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.ResourceKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Control Property
        /// <summary>
        /// The XML name of the <see cref="Control"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ControlPropertyName = "control";
        
        /// <summary>
        /// Gets or sets the Control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Control.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.ControlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Control
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardStepElement.ControlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.ControlPropertyName] = value;
            }
        }
        #endregion
        
        #region AllowBack Property
        /// <summary>
        /// The XML name of the <see cref="AllowBack"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AllowBackPropertyName = "allowBack";
        
        /// <summary>
        /// Gets or sets the AllowBack.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowBack.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.AllowBackPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool AllowBack
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.WizardStepElement.AllowBackPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.AllowBackPropertyName] = value;
            }
        }
        #endregion
        
        #region AllowNext Property
        /// <summary>
        /// The XML name of the <see cref="AllowNext"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string AllowNextPropertyName = "allowNext";
        
        /// <summary>
        /// Gets or sets the AllowNext.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowNext.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.AllowNextPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool AllowNext
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.WizardStepElement.AllowNextPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.AllowNextPropertyName] = value;
            }
        }
        #endregion
        
        #region LastSaveStep Property
        /// <summary>
        /// The XML name of the <see cref="LastSaveStep"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LastSaveStepPropertyName = "lastSaveStep";
        
        /// <summary>
        /// Gets or sets the LastSaveStep.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LastSaveStep.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.LastSaveStepPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool LastSaveStep
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.WizardStepElement.LastSaveStepPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.LastSaveStepPropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepElement.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.WizardStepSettingsElementCollection Settings
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepSettingsElementCollection)(base[global::_4screen.CSB.Common.WizardStepElement.SettingsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepElement.SettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The CommonCustomizationElement Configuration Element.
    /// </summary>
    public partial class CommonCustomizationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region BreadCrumbUserOrCommunityEnabled Property
        /// <summary>
        /// The XML name of the <see cref="BreadCrumbUserOrCommunityEnabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string BreadCrumbUserOrCommunityEnabledPropertyName = "breadCrumbUserOrCommunityEnabled";
        
        /// <summary>
        /// Gets or sets the BreadCrumbUserOrCommunityEnabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The BreadCrumbUserOrCommunityEnabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CommonCustomizationElement.BreadCrumbUserOrCommunityEnabledPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public bool BreadCrumbUserOrCommunityEnabled
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.CommonCustomizationElement.BreadCrumbUserOrCommunityEnabledPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CommonCustomizationElement.BreadCrumbUserOrCommunityEnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region TitleFormat1 Property
        /// <summary>
        /// The XML name of the <see cref="TitleFormat1"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitleFormat1PropertyName = "titleFormat1";
        
        /// <summary>
        /// Gets or sets the TitleFormat1.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TitleFormat1.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat1PropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string TitleFormat1
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat1PropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat1PropertyName] = value;
            }
        }
        #endregion
        
        #region TitleFormat2 Property
        /// <summary>
        /// The XML name of the <see cref="TitleFormat2"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitleFormat2PropertyName = "titleFormat2";
        
        /// <summary>
        /// Gets or sets the TitleFormat2.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TitleFormat2.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat2PropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string TitleFormat2
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat2PropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat2PropertyName] = value;
            }
        }
        #endregion
        
        #region TitleFormat3 Property
        /// <summary>
        /// The XML name of the <see cref="TitleFormat3"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitleFormat3PropertyName = "titleFormat3";
        
        /// <summary>
        /// Gets or sets the TitleFormat3.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TitleFormat3.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat3PropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string TitleFormat3
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat3PropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.CommonCustomizationElement.TitleFormat3PropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ShopSection Configuration Section.
    /// </summary>
    public partial class ShopSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ShopSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShopSectionSectionName = "shopSection";
        
        /// <summary>
        /// Gets the ShopSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.ShopSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.ShopSection.ShopSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ShopSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ShopSettings Property
        /// <summary>
        /// The XML name of the <see cref="ShopSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShopSettingsPropertyName = "shopSettings";
        
        /// <summary>
        /// Gets or sets the ShopSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ShopSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopSection.ShopSettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.ShopSettingElementCollection ShopSettings
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopSettingElementCollection)(base[global::_4screen.CSB.Common.ShopSection.ShopSettingsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ShopSection.ShopSettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region Tags Property
        /// <summary>
        /// The XML name of the <see cref="Tags"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TagsPropertyName = "tags";
        
        /// <summary>
        /// Gets or sets the Tags.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Tags.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopSection.TagsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.ShopTagElementCollection Tags
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopTagElementCollection)(base[global::_4screen.CSB.Common.ShopSection.TagsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ShopSection.TagsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ShopSetting Configuration Element.
    /// </summary>
    public partial class ShopSetting : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region key Property
        /// <summary>
        /// The XML name of the <see cref="key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string keyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopSetting.keyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string key
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ShopSetting.keyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ShopSetting.keyPropertyName] = value;
            }
        }
        #endregion
        
        #region value Property
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string valuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopSetting.valuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string value
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ShopSetting.valuePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ShopSetting.valuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of ShopSetting instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.ShopSetting), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.ShopSettingElementCollection.ShopSettingPropertyName)]
    public partial class ShopSettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.ShopSetting"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShopSettingPropertyName = "shopSetting";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.ShopSettingElementCollection.ShopSettingPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.ShopSettingElementCollection.ShopSettingPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.ShopSetting)(element)).key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.ShopSetting"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.ShopSetting"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.ShopSetting();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ShopSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.ShopSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ShopSetting this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopSetting)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ShopSetting"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::_4screen.CSB.Common.ShopSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ShopSetting this[object key]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopSetting)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.ShopSetting"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="shopSetting">The <see cref="global::_4screen.CSB.Common.ShopSetting"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.ShopSetting shopSetting)
        {
            base.BaseAdd(shopSetting);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.ShopSetting"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="shopSetting">The <see cref="global::_4screen.CSB.Common.ShopSetting"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.ShopSetting shopSetting)
        {
            base.BaseRemove(this.GetElementKey(shopSetting));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of ShopTagElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.ShopTagElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.ShopTagElementCollection.ShopTagElementPropertyName)]
    public partial class ShopTagElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.ShopTagElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShopTagElementPropertyName = "tag";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.ShopTagElementCollection.ShopTagElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.ShopTagElementCollection.ShopTagElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.ShopTagElement)(element)).Value;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.ShopTagElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.ShopTagElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.ShopTagElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ShopTagElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.ShopTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ShopTagElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopTagElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ShopTagElement"/> with the specified key.
        /// </summary>
        /// <param name="value">The key of the <see cref="global::_4screen.CSB.Common.ShopTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ShopTagElement this[object value]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ShopTagElement)(base.BaseGet(value)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.ShopTagElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tag">The <see cref="global::_4screen.CSB.Common.ShopTagElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.ShopTagElement tag)
        {
            base.BaseAdd(tag);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.ShopTagElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tag">The <see cref="global::_4screen.CSB.Common.ShopTagElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.ShopTagElement tag)
        {
            base.BaseRemove(this.GetElementKey(tag));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ShopTagElement Configuration Element.
    /// </summary>
    public partial class ShopTagElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ShopTagElement.ValuePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Value
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ShopTagElement.ValuePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ShopTagElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The OutputTemplatesSection Configuration Section.
    /// </summary>
    public partial class OutputTemplatesSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the OutputTemplatesSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string OutputTemplatesSectionSectionName = "outputTemplatesSection";
        
        /// <summary>
        /// Gets the OutputTemplatesSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.OutputTemplatesSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.OutputTemplatesSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.OutputTemplatesSection.OutputTemplatesSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplatesSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.OutputTemplatesSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Templates Property
        /// <summary>
        /// The XML name of the <see cref="Templates"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TemplatesPropertyName = "templates";
        
        /// <summary>
        /// Gets or sets the Templates.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Templates.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplatesSection.TemplatesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.OutputTemplateElementCollection Templates
        {
            get
            {
                return ((global::_4screen.CSB.Common.OutputTemplateElementCollection)(base[global::_4screen.CSB.Common.OutputTemplatesSection.TemplatesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.OutputTemplatesSection.TemplatesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of OutputTemplateElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.OutputTemplateElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.OutputTemplateElementCollection.OutputTemplateElementPropertyName)]
    public partial class OutputTemplateElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string OutputTemplateElementPropertyName = "template";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.OutputTemplateElementCollection.OutputTemplateElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.OutputTemplateElementCollection.OutputTemplateElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.OutputTemplateElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.OutputTemplateElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.OutputTemplateElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.OutputTemplateElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.OutputTemplateElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.OutputTemplateElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="template">The <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.OutputTemplateElement template)
        {
            base.BaseAdd(template);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="template">The <see cref="global::_4screen.CSB.Common.OutputTemplateElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.OutputTemplateElement template)
        {
            base.BaseRemove(this.GetElementKey(template));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The OutputTemplateElement Configuration Element.
    /// </summary>
    public partial class OutputTemplateElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region RepeaterControl Property
        /// <summary>
        /// The XML name of the <see cref="RepeaterControl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string RepeaterControlPropertyName = "repeaterControl";
        
        /// <summary>
        /// Gets or sets the RepeaterControl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RepeaterControl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplateElement.RepeaterControlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string RepeaterControl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.OutputTemplateElement.RepeaterControlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.OutputTemplateElement.RepeaterControlPropertyName] = value;
            }
        }
        #endregion
        
        #region OutputTemplateControl Property
        /// <summary>
        /// The XML name of the <see cref="OutputTemplateControl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string OutputTemplateControlPropertyName = "outputTemplateControl";
        
        /// <summary>
        /// Gets or sets the OutputTemplateControl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The OutputTemplateControl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplateElement.OutputTemplateControlPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string OutputTemplateControl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.OutputTemplateElement.OutputTemplateControlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.OutputTemplateElement.OutputTemplateControlPropertyName] = value;
            }
        }
        #endregion
        
        #region Image Property
        /// <summary>
        /// The XML name of the <see cref="Image"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ImagePropertyName = "image";
        
        /// <summary>
        /// Gets or sets the Image.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Image.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplateElement.ImagePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Image
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.OutputTemplateElement.ImagePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.OutputTemplateElement.ImagePropertyName] = value;
            }
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.OutputTemplateElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public global::System.Guid Id
        {
            get
            {
                return ((global::System.Guid)(base[global::_4screen.CSB.Common.OutputTemplateElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.OutputTemplateElement.IdPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of ContentReport instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.ContentReport), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.ContentReports.ContentReportPropertyName)]
    public partial class ContentReports : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.ContentReport"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ContentReportPropertyName = "contentReport";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.ContentReports.ContentReportPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.ContentReports.ContentReportPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.ContentReport)(element)).ReasonKey;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.ContentReport"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.ContentReport"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.ContentReport();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ContentReport"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.ContentReport"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ContentReport this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ContentReport)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.ContentReport"/> with the specified key.
        /// </summary>
        /// <param name="reasonKey">The key of the <see cref="global::_4screen.CSB.Common.ContentReport"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.ContentReport this[object reasonKey]
        {
            get
            {
                return ((global::_4screen.CSB.Common.ContentReport)(base.BaseGet(reasonKey)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.ContentReport"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="contentReport">The <see cref="global::_4screen.CSB.Common.ContentReport"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.ContentReport contentReport)
        {
            base.BaseAdd(contentReport);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.ContentReport"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="contentReport">The <see cref="global::_4screen.CSB.Common.ContentReport"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.ContentReport contentReport)
        {
            base.BaseRemove(this.GetElementKey(contentReport));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region LocalizationBaseFileName Property
        /// <summary>
        /// The XML name of the <see cref="LocalizationBaseFileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LocalizationBaseFileNamePropertyName = "localizationBaseFileName";
        
        /// <summary>
        /// Gets or sets the LocalizationBaseFileName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalizationBaseFileName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ContentReports.LocalizationBaseFileNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string LocalizationBaseFileName
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ContentReports.LocalizationBaseFileNamePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ContentReports.LocalizationBaseFileNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The ContentReport Configuration Element.
    /// </summary>
    public partial class ContentReport : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ReasonKey Property
        /// <summary>
        /// The XML name of the <see cref="ReasonKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ReasonKeyPropertyName = "reasonKey";
        
        /// <summary>
        /// Gets or sets the ReasonKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ReasonKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ContentReport.ReasonKeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string ReasonKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ContentReport.ReasonKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ContentReport.ReasonKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region TextKey Property
        /// <summary>
        /// The XML name of the <see cref="TextKey"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TextKeyPropertyName = "textKey";
        
        /// <summary>
        /// Gets or sets the TextKey.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TextKey.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ContentReport.TextKeyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string TextKey
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.ContentReport.TextKeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ContentReport.TextKeyPropertyName] = value;
            }
        }
        #endregion
        
        #region ReadOnly Property
        /// <summary>
        /// The XML name of the <see cref="ReadOnly"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ReadOnlyPropertyName = "readOnly";
        
        /// <summary>
        /// Gets or sets the ReadOnly.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ReadOnly.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ContentReport.ReadOnlyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool ReadOnly
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.ContentReport.ReadOnlyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ContentReport.ReadOnlyPropertyName] = value;
            }
        }
        #endregion
        
        #region ShowSend Property
        /// <summary>
        /// The XML name of the <see cref="ShowSend"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ShowSendPropertyName = "showSend";
        
        /// <summary>
        /// Gets or sets the ShowSend.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ShowSend.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.ContentReport.ShowSendPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public bool ShowSend
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.ContentReport.ShowSendPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.ContentReport.ShowSendPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The MapSection Configuration Section.
    /// </summary>
    public partial class MapSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MapSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapSectionSectionName = "mapSection";
        
        /// <summary>
        /// Gets the MapSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static global::_4screen.CSB.Common.MapSection Instance
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapSection)(global::System.Configuration.ConfigurationManager.GetSection(global::_4screen.CSB.Common.MapSection.MapSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Maps Property
        /// <summary>
        /// The XML name of the <see cref="Maps"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapsPropertyName = "maps";
        
        /// <summary>
        /// Gets or sets the Maps.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Maps.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapSection.MapsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapElementCollection Maps
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapElementCollection)(base[global::_4screen.CSB.Common.MapSection.MapsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapSection.MapsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The MapElement Configuration Element.
    /// </summary>
    public partial class MapElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region Width Property
        /// <summary>
        /// The XML name of the <see cref="Width"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WidthPropertyName = "width";
        
        /// <summary>
        /// Gets or sets the Width.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Width.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.WidthPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public int Width
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.MapElement.WidthPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.WidthPropertyName] = value;
            }
        }
        #endregion
        
        #region Height Property
        /// <summary>
        /// The XML name of the <see cref="Height"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string HeightPropertyName = "height";
        
        /// <summary>
        /// Gets or sets the Height.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Height.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.HeightPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public int Height
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.MapElement.HeightPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.HeightPropertyName] = value;
            }
        }
        #endregion
        
        #region Zoom Property
        /// <summary>
        /// The XML name of the <see cref="Zoom"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ZoomPropertyName = "zoom";
        
        /// <summary>
        /// Gets or sets the Zoom.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Zoom.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.ZoomPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public int Zoom
        {
            get
            {
                return ((int)(base[global::_4screen.CSB.Common.MapElement.ZoomPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.ZoomPropertyName] = value;
            }
        }
        #endregion
        
        #region Latitude Property
        /// <summary>
        /// The XML name of the <see cref="Latitude"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LatitudePropertyName = "latitude";
        
        /// <summary>
        /// Gets or sets the Latitude.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Latitude.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.LatitudePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public double Latitude
        {
            get
            {
                return ((double)(base[global::_4screen.CSB.Common.MapElement.LatitudePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.LatitudePropertyName] = value;
            }
        }
        #endregion
        
        #region Longitude Property
        /// <summary>
        /// The XML name of the <see cref="Longitude"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string LongitudePropertyName = "longitude";
        
        /// <summary>
        /// Gets or sets the Longitude.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Longitude.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.LongitudePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public double Longitude
        {
            get
            {
                return ((double)(base[global::_4screen.CSB.Common.MapElement.LongitudePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.LongitudePropertyName] = value;
            }
        }
        #endregion
        
        #region MapLayout Property
        /// <summary>
        /// The XML name of the <see cref="MapLayout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapLayoutPropertyName = "mapLayout";
        
        /// <summary>
        /// Gets or sets the MapLayout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MapLayout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.MapLayoutPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapLayout MapLayout
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapLayout)(base[global::_4screen.CSB.Common.MapElement.MapLayoutPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.MapLayoutPropertyName] = value;
            }
        }
        #endregion
        
        #region MapStyle Property
        /// <summary>
        /// The XML name of the <see cref="MapStyle"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapStylePropertyName = "mapStyle";
        
        /// <summary>
        /// Gets or sets the MapStyle.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MapStyle.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.MapStylePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapStyle MapStyle
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapStyle)(base[global::_4screen.CSB.Common.MapElement.MapStylePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.MapStylePropertyName] = value;
            }
        }
        #endregion
        
        #region MapNavigation Property
        /// <summary>
        /// The XML name of the <see cref="MapNavigation"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapNavigationPropertyName = "mapNavigation";
        
        /// <summary>
        /// Gets or sets the MapNavigation.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MapNavigation.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.MapNavigationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapNavigation MapNavigation
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapNavigation)(base[global::_4screen.CSB.Common.MapElement.MapNavigationPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.MapNavigationPropertyName] = value;
            }
        }
        #endregion
        
        #region ObjectTypes Property
        /// <summary>
        /// The XML name of the <see cref="ObjectTypes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ObjectTypesPropertyName = "objectTypes";
        
        /// <summary>
        /// Gets or sets the ObjectTypes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ObjectTypes.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapElement.ObjectTypesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapObjectTypeElementCollection ObjectTypes
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeElementCollection)(base[global::_4screen.CSB.Common.MapElement.ObjectTypesPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapElement.ObjectTypesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The MapObjectTypeElement Configuration Element.
    /// </summary>
    public partial class MapObjectTypeElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapObjectTypeElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeElement.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region IconUrl Property
        /// <summary>
        /// The XML name of the <see cref="IconUrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IconUrlPropertyName = "iconUrl";
        
        /// <summary>
        /// Gets or sets the IconUrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IconUrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeElement.IconUrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string IconUrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapObjectTypeElement.IconUrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeElement.IconUrlPropertyName] = value;
            }
        }
        #endregion
        
        #region Selected Property
        /// <summary>
        /// The XML name of the <see cref="Selected"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SelectedPropertyName = "selected";
        
        /// <summary>
        /// Gets or sets the Selected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Selected.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeElement.SelectedPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool Selected
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.MapObjectTypeElement.SelectedPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeElement.SelectedPropertyName] = value;
            }
        }
        #endregion
        
        #region Tags Property
        /// <summary>
        /// The XML name of the <see cref="Tags"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TagsPropertyName = "tags";
        
        /// <summary>
        /// Gets or sets the Tags.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Tags.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeElement.TagsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::_4screen.CSB.Common.MapObjectTypeTagElementCollection Tags
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeTagElementCollection)(base[global::_4screen.CSB.Common.MapObjectTypeElement.TagsPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeElement.TagsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The MapObjectTypeTagElement Configuration Element.
    /// </summary>
    public partial class MapObjectTypeTagElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Id Property
        /// <summary>
        /// The XML name of the <see cref="Id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IdPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeTagElement.IdPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Id
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapObjectTypeTagElement.IdPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeTagElement.IdPropertyName] = value;
            }
        }
        #endregion
        
        #region IconUrl Property
        /// <summary>
        /// The XML name of the <see cref="IconUrl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string IconUrlPropertyName = "iconUrl";
        
        /// <summary>
        /// Gets or sets the IconUrl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The IconUrl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeTagElement.IconUrlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string IconUrl
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapObjectTypeTagElement.IconUrlPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeTagElement.IconUrlPropertyName] = value;
            }
        }
        #endregion
        
        #region Selected Property
        /// <summary>
        /// The XML name of the <see cref="Selected"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string SelectedPropertyName = "selected";
        
        /// <summary>
        /// Gets or sets the Selected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Selected.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeTagElement.SelectedPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool Selected
        {
            get
            {
                return ((bool)(base[global::_4screen.CSB.Common.MapObjectTypeTagElement.SelectedPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeTagElement.SelectedPropertyName] = value;
            }
        }
        #endregion
        
        #region Title Property
        /// <summary>
        /// The XML name of the <see cref="Title"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string TitlePropertyName = "title";
        
        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Title.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.MapObjectTypeTagElement.TitlePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Title
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.MapObjectTypeTagElement.TitlePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.MapObjectTypeTagElement.TitlePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of MapElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.MapElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.MapElementCollection.MapElementPropertyName)]
    public partial class MapElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.MapElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapElementPropertyName = "map";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.MapElementCollection.MapElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.MapElementCollection.MapElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.MapElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.MapElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.MapElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.MapElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.MapElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="map">The <see cref="global::_4screen.CSB.Common.MapElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.MapElement map)
        {
            base.BaseAdd(map);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.MapElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="map">The <see cref="global::_4screen.CSB.Common.MapElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.MapElement map)
        {
            base.BaseRemove(this.GetElementKey(map));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapElement GetItemAt(int index)
        {
            return ((global::_4screen.CSB.Common.MapElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapElement GetItemByKey(string id)
        {
            return ((global::_4screen.CSB.Common.MapElement)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of MapObjectTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.MapObjectTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.MapObjectTypeElementCollection.MapObjectTypeElementPropertyName)]
    public partial class MapObjectTypeElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapObjectTypeElementPropertyName = "objectType";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.MapObjectTypeElementCollection.MapObjectTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.MapObjectTypeElementCollection.MapObjectTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.MapObjectTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="objectType">The <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.MapObjectTypeElement objectType)
        {
            base.BaseAdd(objectType);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="objectType">The <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.MapObjectTypeElement objectType)
        {
            base.BaseRemove(this.GetElementKey(objectType));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeElement GetItemAt(int index)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapObjectTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeElement GetItemByKey(string id)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeElement)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of MapObjectTypeTagElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.MapObjectTypeTagElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.MapObjectTypeTagElementCollection.MapObjectTypeTagElementPropertyName)]
    public partial class MapObjectTypeTagElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string MapObjectTypeTagElementPropertyName = "tag";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.MapObjectTypeTagElementCollection.MapObjectTypeTagElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.MapObjectTypeTagElementCollection.MapObjectTypeTagElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeTagElement)(element)).Id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.MapObjectTypeTagElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeTagElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeTagElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeTagElement this[object id]
        {
            get
            {
                return ((global::_4screen.CSB.Common.MapObjectTypeTagElement)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tag">The <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.MapObjectTypeTagElement tag)
        {
            base.BaseAdd(tag);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="tag">The <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.MapObjectTypeTagElement tag)
        {
            base.BaseRemove(this.GetElementKey(tag));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeTagElement GetItemAt(int index)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeTagElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::_4screen.CSB.Common.MapObjectTypeTagElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.MapObjectTypeTagElement GetItemByKey(string id)
        {
            return ((global::_4screen.CSB.Common.MapObjectTypeTagElement)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// A collection of WizardStepSettingsElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::_4screen.CSB.Common.WizardStepSettingsElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::_4screen.CSB.Common.WizardStepSettingsElementCollection.WizardStepSettingsElementPropertyName)]
    public partial class WizardStepSettingsElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string WizardStepSettingsElementPropertyName = "settingsEntry";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::_4screen.CSB.Common.WizardStepSettingsElementCollection.WizardStepSettingsElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::_4screen.CSB.Common.WizardStepSettingsElementCollection.WizardStepSettingsElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::_4screen.CSB.Common.WizardStepSettingsElement)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::_4screen.CSB.Common.WizardStepSettingsElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepSettingsElement this[int index]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepSettingsElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepSettingsElement this[object key]
        {
            get
            {
                return ((global::_4screen.CSB.Common.WizardStepSettingsElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingsEntry">The <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(global::_4screen.CSB.Common.WizardStepSettingsElement settingsEntry)
        {
            base.BaseAdd(settingsEntry);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingsEntry">The <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(global::_4screen.CSB.Common.WizardStepSettingsElement settingsEntry)
        {
            base.BaseRemove(this.GetElementKey(settingsEntry));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepSettingsElement GetItemAt(int index)
        {
            return ((global::_4screen.CSB.Common.WizardStepSettingsElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::_4screen.CSB.Common.WizardStepSettingsElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public global::_4screen.CSB.Common.WizardStepSettingsElement GetItemByKey(string key)
        {
            return ((global::_4screen.CSB.Common.WizardStepSettingsElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// The WizardStepSettingsElement Configuration Element.
    /// </summary>
    public partial class WizardStepSettingsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepSettingsElement.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public string Key
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardStepSettingsElement.KeyPropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepSettingsElement.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::_4screen.CSB.Common.WizardStepSettingsElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public string Value
        {
            get
            {
                return ((string)(base[global::_4screen.CSB.Common.WizardStepSettingsElement.ValuePropertyName]));
            }
            set
            {
                base[global::_4screen.CSB.Common.WizardStepSettingsElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace _4screen.CSB.Common
{
    
    
    /// <summary>
    /// DeleteEvents.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
    public enum DeleteEvents
    {
        
        /// <summary>
        /// Delete.
        /// </summary>
        Delete = 1,
        
        /// <summary>
        /// StatusDeleted.
        /// </summary>
        StatusDeleted = 2,
    }
}
